"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[143767],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var s=r(296540);const i={},n=s.createContext(i);function o(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:t},e.children)}},122122:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/pointcut-9d730f4070f82f7c21e17a6f48f014bb.webp"},203896:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect/index","title":"Assert Value Aspect","description":"Checks whether the value of a given property satisfies a given condition.","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect","slug":"/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvalueaspect/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Add Change Aspect","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/addchangeaspect/"},"next":{"title":"Assert Value Required Aspect","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/assertvaluerequiredaspect/"}}');var i=r(474848),n=r(28453);const o={},a="Assert Value Aspect",d={},c=[{value:"Examples",id:"examples",level:2},{value:"Assert a multi-valued object",id:"assert-a-multi-valued-object",level:3},{value:"Properties",id:"properties",level:2},{value:"Child Element: PointCut",id:"child-element-pointcut",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"assert-value-aspect",children:"Assert Value Aspect"})}),"\n",(0,i.jsx)(t.p,{children:"Checks whether the value of a given property satisfies a given condition."}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"The following example makes sure that, when creating a new employee, the contract end date is after the contract start date. The pointcuts define when the value assertion must happen."}),"\n",(0,i.jsxs)(t.p,{children:["Code attributes enclosed with ",(0,i.jsx)(t.code,{children:"<>"})," need to be replaced with a custom value before entering the script in the command line."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'<AssertValueAspect Identifier="Directory_User_NewInternal_CheckDates" Binding="Workflow_Directory_User:Directory_User.Records.ContractEndDate" ExpressionBinding="Workflow_Directory_User:Directory_User.Records" Expression="C#:record: return ( ((Nullable&lt;DateTime&gt;) record.ContractStartDate).HasValue && ((Nullable&lt;DateTime&gt;) record.ContractEndDate).HasValue) ?\xa0\xa0record.ContractStartDate &lt; record.ContractEndDate : true;" Message_L1="Contract\'s end date must be after contract\'s start date.">\xa0\xa0\xa0\xa0<PointCut Activity="Directory_User_NewInternal:Request" ActivityState="ActionWithRefine-Executed" Mode="Before" />\xa0\xa0\xa0\xa0<PointCut Activity="Directory_User_NewInternal:Review" ActivityState="ReviewWithFeedback-Approved" Mode="Before" /></AssertValueAspect>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"assert-a-multi-valued-object",children:"Assert a multi-valued object"}),"\n",(0,i.jsx)(t.p,{children:"When asserting a multi-valued object, said object must not be called through a binding that goes back and forth between entities."}),"\n",(0,i.jsxs)(t.p,{children:["For example, to manage records, using the ExpressionBinding set to ",(0,i.jsx)(t.code,{children:"Workflow_Directory_User:Directory_User"}),". Records and the Expression using C#:record",":return"," record.Directory_User.Records... will not work."]}),"\n",(0,i.jsxs)(t.p,{children:["Instead, the ExpressionBinding should be set to ",(0,i.jsx)(t.code,{children:"Workflow_Directory_User:Directory_User"})," and the Expression should use C#:user",":return"," user.Records."]}),"\n",(0,i.jsx)(t.p,{children:"The following example makes sure that a user's positions do not overlap."}),"\n",(0,i.jsxs)(t.p,{children:["Code attributes enclosed with ",(0,i.jsx)(t.code,{children:"<>"})," need to be replaced with a custom value before entering the script in the command line."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'<AssertValueAspect Identifier="RecordsOverlapCheck" Binding="Workflow_Directory_User:Directory_User.Records.Organization" ExpressionBinding="Workflow_Directory_User:Directory_User" Expression="C#:user:for (int i = 0; i &lt; user.Records.Count; i++)  \n{  \n\xa0\xa0\xa0\xa0for (int j = 0; j &lt; user.Records.Count &amp;&amp; i != j ; j++)  \n\xa0\xa0\xa0\xa0{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if (user.Records[i].StartDate != default  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&amp;&amp; user.Records[j].StartDate != default)  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ((user.Records[i].EndDate == null) &amp;&amp; (user.Records[j].EndDate == null))  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0|| ((user.Records[i].EndDate == null) &amp;&amp; (user.Records[j].EndDate != null) &amp;&amp; (user.Records[j].EndDate &gt; user.Records[i].StartDate))  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0|| ((user.Records[j].EndDate == null) &amp;&amp; (user.Records[i].EndDate != null) &amp;&amp; (user.Records[i].EndDate &gt;= user.Records[j].StartDate))  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0|| ((user.Records[i].EndDate != null) &amp;&amp; (user.Records[j].EndDate != null) &amp;&amp; (user.Records[i].StartDate &lt;= user.Records[j].EndDate) &amp;&amp; (user.Records[i].EndDate &gt;= user.Records[j].StartDate))  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return false;  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0}  \n}  \nreturn true;" Message_L1="A user cannot have more than one position simultaneously.">\xa0\xa0\xa0\xa0<PointCut Activity=... ></AssertValueAspect>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Binding   required"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"Binding whose difference with ExpressionBinding defines the property to be validated by the aspect."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Identifier   required"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"Unique identifier of the aspect."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Expression   optional"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"C# expression returning a boolean, false to invalidate the property value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ExpressionBinding   optional"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsxs)(t.td,{children:["Binding:   - Defines the variable type used in the potential expressions specified in the aspect; - Whose difference with Binding defines the property involved in the aspect   ",(0,i.jsx)(t.strong,{children:"NOTE:"})," Required when handling the property of multi-valued objects, for example records, to make sure to modify the property in all records and not only in one."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IfExpression   optional"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsxs)(t.td,{children:["Expression that conditions the aspect execution. See the ",(0,i.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/expressions/",children:"Expressions"})," topic\xa0for additional information."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Message_L1   optional"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"Message in language 1 (up to 16) to be displayed when the property is invalidated by the condition specified in Expression."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Priority   default value: 0"}),(0,i.jsx)(t.td,{children:"Int32"}),(0,i.jsxs)(t.td,{children:["Execution priority among all aspects. At a given activity state, the aspect with the highest priority will be triggered first.  ",(0,i.jsx)(t.strong,{children:"NOTE:"})," The priority can be a negative value."]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"child-element-pointcut",children:"Child Element: PointCut"}),"\n",(0,i.jsxs)(t.p,{children:["A pointcut is a mechanism telling Identity Manager when to execute the linked aspect. See the ",(0,i.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/workflows/aspects/",children:"Aspects"})," topic for additional information."]}),"\n",(0,i.jsx)(t.p,{children:"The position of the pointcut is specified by an activity state and a mode (before or after)."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"pointcut Schema",src:r(122122).A+"",width:"4282",height:"562"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Activity   required"}),(0,i.jsx)(t.td,{children:"Int64"}),(0,i.jsx)(t.td,{children:"Identifier of the activity whose specified state triggers the aspect."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ActivityState   required"}),(0,i.jsx)(t.td,{children:"Enumeration"}),(0,i.jsx)(t.td,{children:"Identifier of the activity state that triggers the aspect."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Mode   default value: 0"}),(0,i.jsx)(t.td,{children:"PointCutMode"}),(0,i.jsx)(t.td,{children:"Mode defining when exactly the aspect is triggered around the specified workflow's activity state.   0 - Before \u2014 the aspect will be executed on entry to the specified activity state, regardless of the transition used.   1 - After \u2014 the aspect will be executed on exit from the specified activity state, regardless of the transition used."})]})]})]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);