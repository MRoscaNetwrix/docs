"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[174548],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(296540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},431849:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask/index","title":"Fulfill Task","description":"Retrieves provisioning orders from the informed connector generated by GenerateProvisioningOrdersTask to make changes in a system. Instead of a connector it is possible to launch it with a list of TaskResourceTypes.","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask","slug":"/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/fulfilltask/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Deploy Configuration Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/deployconfigurationtask/"},"next":{"title":"Generate Provisioning Orders Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/generateprovisioningorderstask/"}}');var i=r(474848),s=r(28453);const o={},l="Fulfill Task",c={},a=[{value:"Examples",id:"examples",level:2},{value:"Ignore Archiving",id:"ignore-archiving",level:3},{value:"Properties",id:"properties",level:2},{value:"Child Element: TaskResourceType",id:"child-element-taskresourcetype",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fulfill-task",children:"Fulfill Task"})}),"\n",(0,i.jsx)(n.p,{children:"Retrieves provisioning orders from the informed connector generated by GenerateProvisioningOrdersTask to make changes in a system. Instead of a connector it is possible to launch it with a list of TaskResourceTypes."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.p,{children:["The following example reads all provisioning order concerning the ",(0,i.jsx)(n.code,{children:"ServiceNow"})," connector to make the changes in ServiceNow."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n<FulfillTask Identifier="FulfillTestServiceNowConnector" Agent="Local" DisplayName_L1="Fulfill ServiceNow" OpenIdClient="Job" Connector="ServiceNow"/>\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The following example reads all provisioning order concerning the ",(0,i.jsx)(n.code,{children:"ServiceNow_Entry_NominativeUser"})," resource type to make the changes in ServiceNow."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n<FulfillTask Identifier="FulfillTestServiceNowWithResourceType" Agent="Local" DisplayName_L1="Fulfill ServiceNow" OpenIdClient="Job" >  <TaskResourceType ResourceType="ServiceNow_Entry_NominativeUser"/></FulfillTask>\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ignore-archiving",children:"Ignore Archiving"}),"\n",(0,i.jsx)(n.p,{children:"While archiving data for audits is part of the main purposes of Identity Manager, some elements can be prevented from being archived, for example during Identity Manager's installation and initialization."}),"\n",(0,i.jsxs)(n.p,{children:["The following example reads all provisioning orders concerning the ",(0,i.jsx)(n.code,{children:"InternalResources"})," connector to open manual provisioning tickets in Identity Manager, without archiving the values prior to the changes on resources."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n<FulfillTask Identifier="FulfillInternalResources" Agent="Local" DisplayName_L1="Fulfill Internal Resources" OpenIdClient="Job" Connector="InternalResources" IgnoreHistorization="true" />\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Details"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DisplayName_L1   required"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Display name of the task in language 1 (up to 16)."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Agent   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Identifier of the agent on which the job will be launched.   ",(0,i.jsx)(n.strong,{children:"Note:"})," when not specified, the task is to be launched on the server.   ",(0,i.jsx)(n.strong,{children:"Warning:"})," all jobs containing the task must be launched on the same agent or on the server."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BatchSize   default value: 0"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    Int32   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Block size for batch calculation."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Connection   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Identifier of the Connection in the appsettings.agent.json."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Connector   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Identifier of the connector involved in the task."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ContinueOnError   default value: false"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    Boolean   ",(0,i.jsx)(n.strong,{children:"Description"}),"   ",(0,i.jsx)(n.code,{children:"true"})," if the execution of the Task returning an error should not stop the job machine state."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Dirty   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    Boolean   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Option to tag resources inserted or updated by the internalResource with Dirty=true."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Identifier   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Unique identifier of the task."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"IgnoreHistorization   default value: false"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    Boolean   ",(0,i.jsx)(n.strong,{children:"Description"}),"   ",(0,i.jsx)(n.code,{children:"true"})," to prevent Identity Manager from archiving the changes (resource creation, update, deletion) performed by the task for the ",(0,i.jsx)(n.code,{children:"InternalResources"})," connector. The impacted table is ",(0,i.jsx)(n.code,{children:"UR_Resources"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"OpenIdClient   optional"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    String   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Connection client for the task."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"child-element-taskresourcetype",children:"Child Element: TaskResourceType"}),"\n",(0,i.jsx)(n.p,{children:"The table TaskResourceTypes makes the link between the tasks and the Resourcetypes."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Details"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ResourceType   required"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"    Int64   ",(0,i.jsx)(n.strong,{children:"Description"}),"   Linked resourceType id."]})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);