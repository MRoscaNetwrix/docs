"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68065],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(296540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},286713:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"changetracker/integration/api/agents","title":"Agents","description":"To pull data on agent statues, configurations and group memberships, use the agentsRanked endpoint.","source":"@site/docs/changetracker/changetracker/integration/api/agents.md","sourceDirName":"changetracker/integration/api","slug":"/changetracker/integration/api/agents","permalink":"/docs/changetracker/changetracker/integration/api/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/changetracker/changetracker/integration/api/agents.md","tags":[],"version":"current","frontMatter":{},"sidebar":"changeTrackerSidebar","previous":{"title":"Installation","permalink":"/docs/changetracker/changetracker/install/overview"},"next":{"title":"API","permalink":"/docs/changetracker/changetracker/integration/api/overview"}}');var i=t(474848),r=t(28453);const l={},a="Agents",o={},d=[{value:"/api/agentsRanked",id:"apiagentsranked",level:2},{value:"POST Request",id:"post-request",level:3},{value:"Parameters",id:"parameters",level:4},{value:"DeviceFilter",id:"devicefilter",level:4},{value:"Json Response Elements",id:"json-response-elements",level:3},{value:"Example PowerShell",id:"example-powershell",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"agents",children:"Agents"})}),"\n",(0,i.jsx)(n.p,{children:"To pull data on agent statues, configurations and group memberships, use the agentsRanked endpoint."}),"\n",(0,i.jsx)(n.h2,{id:"apiagentsranked",children:"/api/agentsRanked"}),"\n",(0,i.jsx)(n.p,{children:"This call returns a list of agent details, including group and tracking template memberships."}),"\n",(0,i.jsx)(n.h3,{id:"post-request",children:"POST Request"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://api/agentsRanked",children:"https://api/agentsRanked"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{  \n\xa0\xa0\xa0\xa0"DeviceFilter":\xa0  \n\xa0\xa0{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"GroupNames": [],  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"AgentDeviceIds": [],  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"AgentDisplayNames": [],  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"OnlineStatuses": [],  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"ExcludeProxiedDevices": false  \n\xa0\xa0\xa0\xa0},  \n\xa0\xa0\xa0\xa0"GetAgentGroupDetails": true,  \n\xa0\xa0\xa0\xa0"GetRelatedTemplates": true,  \n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"DeviceFilter"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specifies the agents to search for by id or group membership."}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 DeviceFilter"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"GetAgentGroupDetails"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specifies a value indicating whether to get agent group details."}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Boolean"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"GetRelatedTemplates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specifies a value indicating whether to get templates applied to the returned agents."}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Boolean"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"devicefilter",children:"DeviceFilter"}),"\n",(0,i.jsx)(n.p,{children:"GroupNames"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Filters by group IDs"}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Comma separated list of strings"}),"\n",(0,i.jsx)(n.li,{children:'Example \u2013 ["A99", "A101", "W43"]'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"AgentDeviceIds"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Filters by device IDs"}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Comma separated list of strings"}),"\n",(0,i.jsx)(n.li,{children:'Example \u2013 ["1,1", "1,9"]'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"AgentDisplayNames"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Filters by display names"}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013: Comma separated list of strings"}),"\n",(0,i.jsx)(n.li,{children:'Example \u2013 ["NWX-4GMJGX3", "Azure 365 Cloud Reporting Group"]'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"OnlineStatuses"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Filters by online device status."}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Comma separated list of strings"}),"\n",(0,i.jsx)(n.li,{children:'Example \u2013 [ "Offline"]'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"ExcludeProxiedDevices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A value indicating whether to exclude proxied devices from the result set"}),"\n",(0,i.jsx)(n.li,{children:"Type \u2013 Boolean"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"json-response-elements",children:"Json Response Elements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"AgentGroups \u2013 A list of agent device group memberships"}),"\n",(0,i.jsx)(n.li,{children:"GroupsLookup \u2013 A lookup list of group id/key to display name"}),"\n",(0,i.jsx)(n.li,{children:"TemplatesLookup \u2013 A lookup list of template id/key to display name"}),"\n",(0,i.jsx)(n.li,{children:"Agents \u2013 The list of agents matching the DeviceFilter"}),"\n",(0,i.jsx)(n.li,{children:"AgentTemplates \u2013 A list of agent device templates"}),"\n",(0,i.jsx)(n.li,{children:"Total \u2013 The number of agents matching the DeviceFilter"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-powershell",children:"Example PowerShell"}),"\n",(0,i.jsx)(n.p,{children:"The following PowerShell script will output the response to a CSV file with the following headers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"DeviceName"}),"\n",(0,i.jsx)(n.li,{children:"FQDN"}),"\n",(0,i.jsx)(n.li,{children:"Groups"}),"\n",(0,i.jsx)(n.li,{children:"Templates"}),"\n",(0,i.jsx)(n.li,{children:"HostType"}),"\n",(0,i.jsx)(n.li,{children:"AgentType"}),"\n",(0,i.jsx)(n.li,{children:"Registered"}),"\n",(0,i.jsx)(n.li,{children:"Os"}),"\n",(0,i.jsx)(n.li,{children:"IPv4"}),"\n",(0,i.jsx)(n.li,{children:"OnlineStatus"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To be able to trust self-signed certificates, each call to Invoke-RestMethod is made with the -SkipCertificateCheck argument. This requires PowerShell 7."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'# Declare script parameters and their default values. Override these defaults from the command line e.g. -HostUrl http://myliveserver/api  \nparam([string]$HostUrl = "https://localhost/api", [string]$AdminUser = "admin", [string]$AdminPwd = "password")  \n# This script is intended to read and display agent details, including group and tracking templates  \nFunction GetAdminUserSession() {  \n\xa0\xa0\xa0\xa0$uri = "$HostUrl/auth/credentials"  \n\xa0\xa0\xa0\xa0$params = "username=$AdminUser&password=$AdminPwd&format=json"  \n\xa0\xa0\xa0\xa0Write-Host "Acquiring User Session: $AdminUser ("$uri.replace("=$AdminPwd", "=******")")"  \n\xa0\xa0\xa0\xa0$result = Invoke-RestMethod -Method Post -Uri $uri -Headers @{ Accept = \'application/json\' } -SkipCertificateCheck -SessionVariable myWebSession -Body $params  \n\xa0\xa0\xa0\xa0If ($null -ne $result.UserId -and $null -ne $result.SessionId) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Write-Host "Acquired User Session: $AdminUser ( User Id:"$result.UserId", Session Id:"$result.SessionId")"  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Return $myWebSession  \n\xa0\xa0\xa0\xa0}  \n}  \nFunction lookup($agentPropertyList, $agentDeviceId) {  \n\xa0\xa0\xa0\xa0for ($i = 0; $i -lt $agentPropertyList.Length; $i++) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$element = $agentPropertyList[$i]  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ($element.AgentDevice.AgentId -eq $agentDeviceId.AgentId -and $element.AgentDevice.DeviceId -eq $agentDeviceId.DeviceId) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return $element;  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0}  \n}  \nFunction lookupGrpNames($grpLookup, $grpIds) {  \n\xa0\xa0\xa0\xa0$grpNames = New-Object "System.Collections.Generic.List[string]"  \n\xa0\xa0\xa0\xa0for ($i = 0; $i -lt $grpIds.Length; $i++) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$grpId = $grpIds[$i]  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for ($j = 0; $j -lt $grpLookup.Length; $j++) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$lookup = $grpLookup[$j]  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ($lookup.Key -eq $grpId) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$grpNames.Add($lookup.Value)  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0return $grpNames;  \n}  \nFunction lookupPCNames($agentPropertyList, $agentDeviceId) {  \n\xa0\xa0\xa0\xa0$list = New-Object System.Collections.Generic.List[System.String]  \n\xa0\xa0\xa0\xa0for ($i = 0; $i -lt $agentPropertyList.Length; $i++) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$element = $agentPropertyList[$i]  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ($element.AgentDevice.AgentId -eq $agentDeviceId.AgentId -and $element.AgentDevice.DeviceId -eq $agentDeviceId.DeviceId) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$list.Add($element.Name)  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0return $list  \n}  \nTry {  \n\xa0\xa0\xa0\xa0# Set up a session variable for the Admin user which can be used on subsequent requests  \n\xa0\xa0\xa0\xa0# Use the session in future calls  \n\xa0\xa0\xa0\xa0$myWebSession = GetAdminUserSession  \n\xa0\xa0\xa0\xa0# csv output file name  \n\xa0\xa0\xa0\xa0$outfile = "agentsRanked-" + (Get-Date).ToString("yyyyMMdd-hhmmss") + ".csv"  \n\xa0\xa0\xa0\xa0# device filter to be applied  \n\xa0\xa0\xa0\xa0$deviceFilter =  \n\xa0\xa0\xa0\xa0"{  \n`"DeviceFilter`": {  \n`"GroupNames`": [],  \n`"AgentDeviceIds`": [],  \n`"AgentDisplayNames`": [],  \n`"ExcludeProxiedDevices`": false,  \n`"OnlineStatuses`": [`"Offline`"]  \n},  \n`"GetAgentGroupDetails`": true,  \n`"GetRelatedTemplates`": true  \n}"  \n\xa0\xa0\xa0\xa0$uri = "$HostUrl/agentsRanked"  \n\xa0\xa0\xa0\xa0Write-Host("Reading Agents: ( $uri ) writing to ( $outfile )")  \n\xa0\xa0\xa0\xa0$result = Invoke-RestMethod -Method Post -ContentType application/json -Uri $uri -SkipCertificateCheck -Headers $headers -Body $deviceFilter -WebSession $myWebSession  \n\xa0\xa0\xa0\xa0$agents = @()  \n\xa0\xa0\xa0\xa0foreach ($item in $result.Agents) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# find groups and templates from other parts of the response  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$groups = lookup $result.AgentGroups $item.AgentDevice  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$groupNames = lookupGrpNames $result.GroupsLookup $groups.MemberOf  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$groupsText = "";  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ($null -ne $groups) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$groupsText = $groupNames -join ","  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$templates = lookup $result.AgentTemplates $item.AgentDevice  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$templatesText = "";  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ($null -ne $templates) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$templatesText = $templates.ConfigTemplates -join ","  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# add custom object to array so CSV format works as expected  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$agents += [PSCustomObject]@{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0DeviceName\xa0\xa0\xa0= $item.DeviceName  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0FQDN\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0= $item.FullyQualifiedDomainName  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Groups\xa0\xa0\xa0\xa0\xa0\xa0\xa0= $groupsText  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Templates\xa0\xa0\xa0\xa0= $templatesText  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0HostType\xa0\xa0\xa0\xa0\xa0= $item.HostType  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0AgentType\xa0\xa0\xa0\xa0= $item.AgentType  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Registered\xa0\xa0\xa0= $item.Registered  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Os\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0= $item.Os  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0IPv4\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0= $item.IPv4  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0OnlineStatus = $item.OnlineStatus  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0# write out to a csv  \n\xa0\xa0\xa0\xa0$agents | Export-Csv -Path $outfile -Delimiter "," -Encoding UTF8 -NoTypeInformation  \n\xa0\xa0\xa0\xa0# to write out the raw json of the response  \n\xa0\xa0\xa0\xa0# $jsonOutfile = "agentsRanked-" + (Get-Date).ToString("yyyyMMdd-hhmmss") + ".json"  \n\xa0\xa0\xa0\xa0# $result | ConvertTo-Json -depth 100 | Out-File $jsonOutfile  \n}  \nCatch [Net.WebException] {  \n\xa0\xa0\xa0\xa0$resp = $_.Exception.Response;  \n\xa0\xa0\xa0\xa0If ( $resp.StatusCode -eq [Net.HttpStatusCode]::BadRequest ) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$result = (New-Object IO.StreamReader($resp.GetResponseStream())).ReadToEnd() | ConvertFrom-Json;  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# Handle errors  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Write-Output $_.Exception  \n\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0Else {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# Handle errors  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Write-Output $_.Exception  \n\xa0\xa0\xa0\xa0}  \n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);