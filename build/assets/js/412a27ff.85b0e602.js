"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[474476],{28453:(e,o,s)=>{s.d(o,{R:()=>r,x:()=>i});var t=s(296540);const c={},l=t.createContext(c);function r(e){const o=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(l.Provider,{value:o},e.children)}},109211:(e,o,s)=>{s.d(o,{A:()=>t});const t=s.p+"assets/images/scenario_2b_block_powershell_1-3947d4bd2c25fd191870998caa883e3b.webp"},464750:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"policypak/leastprivilege/scopefilters/blockpowershell","title":"Scenario 2B: Block Powershell.exe Completely, but Allow Local System to Run a Specific .PS1 Script","description":"In the previous example, we blocked PowerShell (or PSEXEC, etc.) from all user and system processes.","source":"@site/docs/policypak/policypak/leastprivilege/scopefilters/blockpowershell.md","sourceDirName":"policypak/leastprivilege/scopefilters","slug":"/policypak/leastprivilege/scopefilters/blockpowershell","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/blockpowershell","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/scopefilters/blockpowershell.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"Scenario 2: Specific Rule to Block an App from Being Run, Even as Local System","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/blockapp"},"next":{"title":"Scenario 4: Elevating a Service Account","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/elevateserviceaccount"}}');var c=s(474848),l=s(28453);const r={},i="Scenario 2B: Block Powershell.exe Completely, but Allow Local System to Run a Specific .PS1 Script",a={},p=[];function n(e){const o={h1:"h1",header:"header",img:"img",p:"p",...(0,l.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(o.header,{children:(0,c.jsx)(o.h1,{id:"scenario-2b-block-powershellexe-completely-but-allow-local-system-to-run-a-specific-ps1-script",children:"Scenario 2B: Block Powershell.exe Completely, but Allow Local System to Run a Specific .PS1 Script"})}),"\n",(0,c.jsx)(o.p,{children:"In the previous example, we blocked PowerShell (or PSEXEC, etc.) from all user and system processes."}),"\n",(0,c.jsx)(o.p,{children:"However, you might need to run some PowerShell scripts as SYSTEM to perform some maintenance tasks.\xa0 Since PowerShell is now being blocked for all Computer side processes, you cannot run a specific script with PowerShel."}),"\n",(0,c.jsx)(o.p,{children:(0,c.jsx)(o.img,{alt:"A screen shot of a computer Description automatically generated",src:s(681079).A+"",width:"1113",height:"318"})}),"\n",(0,c.jsx)(o.p,{children:"To enable this, simply add another rule to ALLOW AND LOG, for example, C:\\SCRIPTS\\ITSCRIPT1.ps1, and set the scope to User and System processes, but use the scope Filter to SYSTEM."}),"\n",(0,c.jsx)(o.p,{children:(0,c.jsx)(o.img,{alt:"A screenshot of a computer Description automatically generated",src:s(109211).A+"",width:"1429",height:"681"})}),"\n",(0,c.jsx)(o.p,{children:"Result:"}),"\n",(0,c.jsx)(o.p,{children:(0,c.jsx)(o.img,{alt:"A screenshot of a computer Description automatically generated",src:s(848762).A+"",width:"1303",height:"514"})})]})}function d(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,c.jsx)(o,{...e,children:(0,c.jsx)(n,{...e})}):n(e)}},681079:(e,o,s)=>{s.d(o,{A:()=>t});const t=s.p+"assets/images/scenario_2b_block_powershell-90a1e9d005c9251601ec247280bba513.webp"},848762:(e,o,s)=>{s.d(o,{A:()=>t});const t=s.p+"assets/images/scenario_2b_block_powershell_2-c1cc8744fd9cf95cd45a5db376eac07b.webp"}}]);