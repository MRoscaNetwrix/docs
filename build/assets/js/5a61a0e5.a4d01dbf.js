"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[445711],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var s=i(296540);const n={},o=s.createContext(n);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},672729:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/index","title":"Send Role Model Notifications Task","description":"Task that sends a notification to all users who have pending roles to review, only for roles with a simple approval workflow, i.e. pending the validation 1 out of 1.","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask","slug":"/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Send Notifications Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/"},"next":{"title":"Set Access Certification Reviewer Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/setaccesscertificationreviewertask/"}}');var n=i(474848),o=i(28453);const r={},a="Send Role Model Notifications Task",l={},d=[{value:"Examples",id:"examples",level:2},{value:"Properties",id:"properties",level:2},{value:"Child Element: TaskEntityType",id:"child-element-taskentitytype",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"send-role-model-notifications-task",children:"Send Role Model Notifications Task"})}),"\n",(0,n.jsx)(t.p,{children:"Task that sends a notification to all users who have pending roles to review, only for roles with a simple approval workflow, i.e. pending the validation 1 out of 1."}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsxs)(t.p,{children:["The following example sends a notification to all users who have pending roles to review, whose owners are part of ",(0,n.jsx)(t.code,{children:"Directory_User"}),". This is only about roles that need one (and only one) validation."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'\n<SendRoleModelNotificationsTask DisplayName_L1="Send reminder notifications for role review 1/1">  <TaskEntityType EntityType="Directory_User"/></SendRoleModelNotificationsTask>\n\n'})}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Details"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DisplayName_L1   required"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:"Type"}),"    String   ",(0,n.jsx)(t.strong,{children:"Description"}),"   Display name of the task in language 1 (up to 16)."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Identifier   optional"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:"Type"}),"    String   ",(0,n.jsx)(t.strong,{children:"Description"}),"   Unique identifier of the task."]})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"child-element-taskentitytype",children:"Child Element: TaskEntityType"}),"\n",(0,n.jsx)(t.p,{children:"A task entity type defines the entity type on which the task is applied."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Details"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"EntityType   required"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:"Type"}),"    Int64   ",(0,n.jsx)(t.strong,{children:"Description"}),"   Identifier of the entity type that the task is to be applied on."]})]})})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);