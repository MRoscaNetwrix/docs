"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[129486],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(296540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},288122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"enterpriseauditor/admin/datacollector/script/example2","title":"Script Example 2:\xa0Command Query","description":"The following example illustrates the use of scripts within Access Analyzer. This script reads a database list from SQL Server and then proceeds to the File System Data Collector for the size of the database file, essentially inventorying the installed databases, their paths, and sizes.","source":"@site/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example2.md","sourceDirName":"enterpriseauditor/admin/datacollector/script","slug":"/enterpriseauditor/admin/datacollector/script/example2","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example2","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example2.md","tags":[],"version":"current","frontMatter":{},"sidebar":"accessAnalyzerSidebar","previous":{"title":"Script Example 1:\xa0Conversion of Data","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example1"},"next":{"title":"Script Methods and Properties","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/methodsproperties"}}');var r=n(474848),a=n(28453);const i={},o="Script Example 2:\xa0Command Query",c={},l=[{value:"Example of Compound Query Script",id:"example-of-compound-query-script",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"script-example-2command-query",children:"Script Example 2:\xa0Command Query"})}),"\n",(0,r.jsx)(t.p,{children:"The following example illustrates the use of scripts within Access Analyzer. This script reads a database list from SQL Server and then proceeds to the File System Data Collector for the size of the database file, essentially inventorying the installed databases, their paths, and sizes."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE:"})," Because the object instances are not thread-safe, scripts like these that use objects external to Access Analyzer should be run with only one thread."]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, a connection is opened with a SQL server. The SQL server name is provided by Access Analyzer during the query. Access Analyzer provides the active host to the script using the ",(0,r.jsx)(t.strong,{children:"Query.Host"})," property."]}),"\n",(0,r.jsxs)(t.p,{children:["The script then queries the Master database, requesting a ",(0,r.jsx)(t.strong,{children:"recordset"})," containing all databases and proceeds to get the row count. Setting the ",(0,r.jsx)(t.strong,{children:"Query.ResultRows"})," property creates a row of storage for each record in the recordset. It then proceeds to read data from each row by looping row by row. For each row, the database name, filename, and ID are captured. The script then calls a function to get the size of the file. The ",(0,r.jsx)(t.strong,{children:"FileSize"})," function uses the database filename to construct a query to the File System Data Collector, which ultimately returns the size of the file."]}),"\n",(0,r.jsx)(t.p,{children:"The data for each database is stored in the Query object."}),"\n",(0,r.jsx)(t.p,{children:"Finally, the SQL objects are freed."}),"\n",(0,r.jsx)(t.h2,{id:"example-of-compound-query-script",children:"Example of Compound Query Script"}),"\n",(0,r.jsx)(t.p,{children:"The compound query script example is:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'Sub Task()\xa0  \nConst adOpenStatic = 3  \nConst adLockPessimistic = 2\xa0  \nDim cnnSQL  \nDim rstSQL  \nDim I  \nDim sFilespec, sPath, sFile\xa0  \n\' CONNECT TO THE DATABASE  \n\' **** NOTE *****  \n\' Set Uid and pwd to username and password  \n\' OR set both to blank for trusted connections\xa0  \nSet cnnSQL = CreateObject("ADODB.Connection")  \ncnnSQL.Open "Driver={SQL Server};" & _\xa0  \n"Server=" & Query.Host & ";" & _  \n"Database=Master;" & _  \n"Uid=SA;" & _\xa0  \n"Pwd="  \nSet rstSQL = CreateObject("ADODB.Recordset")  \nrstSQL.Open "SELECT dbid, name, filename FROM sysdatabases;", cnnSQL, _  \nadOpenStatic, adLockPessimistic\xa0  \n\' AS LONG AS RECORDS CAME BACK, PROCEED TO CAPTURE DATABASE INFO\xa0  \nIf NOT(rstSQL.EOF) Then  \nQuery.ResultRows=rstSQL.RecordCount  \nrstSQL.MoveFirst  \nFor i=0 to Query.ResultRows-1  \nQuery.ResultRow=i  \nQuery.ResultData("DbId")=rstSQL.Fields("dbid")  \nQuery.ResultData("Name")=rstSQL.Fields("name")  \nsFilespec=rstSQL.Fields("filename")  \nSplitPath sFileSpec, sPath, sFile  \nQuery.ResultData("Path")=sPath\xa0  \n\'GET DB SIZE\xa0  \niSize=GetFileSize(Query.Host, sPath, sFile)  \nQuery.ResultData("Size")=iSize\xa0  \n\'MOVE TO NEXT DB  \nrstSQL.MoveNext\xa0  \nNext\xa0  \nEnd If\xa0  \n\' CLEAN UP\xa0  \nrstSQL.Close  \nSet rstSQL = Nothing\xa0  \ncnnSQL.Close  \nSet cnnSQL = Nothing\xa0  \nEnd Sub\xa0  \n\'---------------------------------------------------------------------\xa0  \nFunction GetFileSize (sHost, sPath, sFile)\xa0  \nsFile=Chr(34) & sFile & Chr(34)  \nsPath=Chr(34) & sPath & Chr(34)  \nWorkingQuery.Reset  \nWorkingQuery.Host=Query.Host  \nWorkingQuery.Source="FILE"  \nsQueryPath="Type=FILEPATH?FilePath=" & sPath & _  \n"?Target=FILES?FileSpec=" & sFile & _  \n"?SubFolders=FALSE?GroupSize=FALSE?Units=Mb"  \nWorkingQuery.Paths1  \nWorkingQuery.Path(0)=sQueryPath  \nWorkingQuery.AddProperty("NAME=Size,DATATYPE=NUMERIC,VALUE=")  \nWorkingQuery.Execute  \nWorkingQuery.ResultRow=0\xa0  \nGetFileSize=WorkingQuery.ResultData("Size")\xa0  \nEnd Function\xa0  \n\'---------------------------------------------------------------------\xa0  \nSub SplitPath(sFileSpec, ByRef sPath, ByRef sFile)  \nDim iPos  \nIf sFileSpec<>"" then  \niPos=instrRev(sFileSpec,"\\")  \nsPath=mid(sFileSpec,1,iPos-1)  \nsFile=mid(sFileSpec,iPos+1)  \nEnd If  \nEnd Sub  \n\'---------------------------------------------------------------------  \n\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);