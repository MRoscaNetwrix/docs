"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[961455],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(296540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},103946:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/467_5_img-3-50c1ab0923c3f56ccec07928c32d10bc.webp"},178914:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/467_7_img-5-6d6eb0f0ed957b70a2d6af38eafecc7d.webp"},320309:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/467_9_img-6-d6957b3ce33d556929160a446669d536.webp"},397521:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/467_11_img-7-84e7ae76ff8a59d36031d131e60037cb.webp"},590460:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/467_1_img-1-d3e6d5508d7565b0f342eef744749bed.webp"},676090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"policypak/leastprivilege/elevate/installfonts","title":"Install Windows Fonts for users or Elevate end-users to install fonts themselves","description":"Business case: Your users don\'t have rights to install fonts, but you may want them to install fonts themselves or install fonts that you approve. In this document we will demonstrate how will you install fonts by using the either method.","source":"@site/docs/policypak/policypak/leastprivilege/elevate/installfonts.md","sourceDirName":"policypak/leastprivilege/elevate","slug":"/policypak/leastprivilege/elevate/installfonts","permalink":"/docs/policypak/policypak/leastprivilege/elevate/installfonts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/elevate/installfonts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"How do I elevate installers that are classified as Installers but not Applications? Like Ninite, 7z, or Self-Extract?","permalink":"/docs/policypak/policypak/leastprivilege/elevate/installers"},"next":{"title":"Elevating Java JAR Files","permalink":"/docs/policypak/policypak/leastprivilege/elevate/javajarfiles"}}');var i=t(474848),o=t(28453);const r={},l="Install Windows Fonts for users or Elevate end-users to install fonts themselves",a={},d=[{value:"Elevating an end-user to install Windows Fonts (FOR USERS)",id:"elevating-an-end-user-to-install-windows-fonts-for-users",level:2},{value:"Using Endpoint Privilege Manager:",id:"using-endpoint-privilege-manager",level:3},{value:"Installing fonts for end-users (FOR ADMINS)",id:"installing-fonts-for-end-users-for-admins",level:2},{value:"Using Endpoint Policy Scripts Manager:",id:"using-endpoint-policy-scripts-manager",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"install-windows-fonts-for-users-or-elevate-end-users-to-install-fonts-themselves",children:"Install Windows Fonts for users or Elevate end-users to install fonts themselves"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Business case"}),": Your users don't have rights to install fonts, but you may want them to install fonts themselves or install fonts that you approve. In this document we will demonstrate how will you install fonts by using the either method."]}),"\n",(0,i.jsx)(n.h2,{id:"elevating-an-end-user-to-install-windows-fonts-for-users",children:"Elevating an end-user to install Windows Fonts (FOR USERS)"}),"\n",(0,i.jsx)(n.h3,{id:"using-endpoint-privilege-manager",children:"Using Endpoint Privilege Manager:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1 \u2013"})," Create a GPO and link it to the required scope"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2 \u2013"})," Create a PPLPM policy, by right-clicking on that node and select ",(0,i.jsx)(n.strong,{children:"Add New EXE Policy"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 3 \u2013"})," Select ",(0,i.jsx)(n.strong,{children:"Use Simple Rule"})," and click on ",(0,i.jsx)(n.strong,{children:"Next"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_1_img-1",src:t(590460).A+"",width:"747",height:"560"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," Consider choosing ",(0,i.jsx)(n.strong,{children:"Use combo rule"})," option for extra security."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 4 \u2013"})," Choose condition as Path, click the ",(0,i.jsx)(n.strong,{children:"Add"})," button and select ",(0,i.jsx)(n.strong,{children:"Add File"})," option."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 5 \u2013"})," Click on the ",(0,i.jsx)(n.strong,{children:"Browse"})," button and specify the path of the fontview.exe application, as shown below."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 6 \u2013"})," Run ",(0,i.jsx)(n.code,{children:"GPUPDATE "}),"on the client machine and verify the results. You can also view theabove steps in this video: ",(0,i.jsx)(n.a,{href:"/docs/policypak/policypak/video/leastprivilege/elevate/installfonts",children:"Enable end-users to install their own fonts"})]}),"\n",(0,i.jsx)(n.h2,{id:"installing-fonts-for-end-users-for-admins",children:"Installing fonts for end-users (FOR ADMINS)"}),"\n",(0,i.jsx)(n.p,{children:"Administrators can install fonts for end-users by using a Netwrix Endpoint Policy Manager (formerly PolicyPak) Scripts Manager."}),"\n",(0,i.jsx)(n.h3,{id:"using-endpoint-policy-scripts-manager",children:"Using Endpoint Policy Scripts Manager:"}),"\n",(0,i.jsx)(n.p,{children:"In this method we'll show how an administrator can install fonts for the users through a GPO using Endpoint Policy Manager Scripts Manager."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1 \u2013"})," Create a GPO and link it to the required scope."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2 \u2013"})," Create a PP Scripts Manager policy and click ",(0,i.jsx)(n.strong,{children:"Next"})," on the Wizard."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 3 \u2013"})," Leave the default option checked ",(0,i.jsx)(n.strong,{children:"Apply this policy to computer (default)"})," and click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 4 \u2013"})," Select PowerShell Script from the drop-down and paste the script to install fonts."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_5_img-3",src:t(103946).A+"",width:"732",height:"561"})}),"\n",(0,i.jsxs)(n.p,{children:["This script to Add Fonts from PowerShell is acquired from Microsoft Doc website. For more information see the Microsoft article on ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/archive/blogs/deploymentguys/adding-and-removing-fonts-with-windows-powershell",children:"Adding and Removing Fonts with Windows PowerShell"}),".",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/archive/blogs/deploymentguys/adding-and-removing-fonts-with-windows-powershell"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'#########################################################################################\xa0\xa0\xa0\xa0  \n# MICROSOFT LEGAL STATEMENT FOR SAMPLE SCRIPTS/CODE\xa0\xa0\xa0\xa0######################################  \n###################################################\xa0\xa0\xa0\xa0  \n# This Sample Code is provided for the purpose of illustration only and is not\xa0\xa0\xa0\xa0  \n# intended to be used in a production environment.  \n#\xa0\xa0\xa0\xa0# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY\xa0\xa0\xa0\xa0  \n# OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\xa0\xa0\xa0\xa0  \n# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\xa0\xa0\xa0\xa0  \n#\xa0\xa0\xa0\xa0# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code\xa0\xa0\xa0\xa0#\xa0  \nand to reproduce and distribute the object code form of the Sample Code, provided\xa0\xa0\xa0\xa0# that You agree:\xa0\xa0\xa0\xa0  \n# (i) to not use Our name, logo, or trademarks to market Your software product\xa0\xa0\xa0\xa0# in which the Sample Code is embedded;\xa0\xa0\xa0\xa0  \n# (ii) to include a valid copyright notice on Your software product in which\xa0\xa0\xa0\xa0# the Sample Code is embedded;\xa0  \nand\xa0\xa0\xa0\xa0# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and\xa0\xa0\xa0\xa0# against any claims or lawsuits,\xa0  \nincluding attorneys\' fees, that arise\xa0\xa0\xa0\xa0  \n# or result from the use or distribution of the Sample Code.\xa0\xa0\xa0\xa0  \n#########################################################################################\xa0\xa0\xa0\xa0  \n#******************************************************************************\xa0\xa0\xa0\xa0  \n# File: Add-Font.ps1\xa0\xa0\xa0\xa0# Date: 08/28/2013\xa0\xa0\xa0\xa0# Version: 1.0.1\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n# Purpose: PowerShell script to install Windows fonts.\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Usage: Add-Font -help | -path "<Font file or folder path>"\xa0\xa0\xa0\xa0  \n#\xa0\xa0\xa0\xa0# Copyright (C) 2010 Microsoft Corporation\xa0\xa0\xa0\xa0  \n#\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Revisions:\xa0\xa0\xa0\xa0# ----------\xa0\xa0\xa0\xa0# 1.0.0 09/22/2010 Created script.\xa0\xa0\xa0\xa0# 1.0.1 08/28/2013 Fixed help text.\xa0  \nAdded quotes around paths in messages.\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0#******************************************************************************\xa0\xa0\xa0\xa0  \n#requires -Version 2.0\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0# Declare Parameters\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0param(\xa0\xa0\xa0\xa0[string] $path = "",\xa0\xa0\xa0\xa0[switch] $help = $false\xa0\xa0\xa0\xa0)\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0  \n# Declare Global Variables and Constants\xa0\xa0\xa0\xa0#*******************************************************************\xa0\xa0\xa0\xa0  \n# Define constants\xa0\xa0\xa0\xa0set-variable CSIDL_FONTS 0x14 -option constant\xa0\xa0\xa0\xa0  \n# Create hashtable containing valid font file extensions and text to append to Registry entry name.\xa0\xa0\xa0\xa0$hashFontFileTypes = @{}\xa0\xa0\xa0\xa0  \n$hashFontFileTypes.Add(".fon", "")\xa0\xa0\xa0\xa0$hashFontFileTypes.Add(".fnt", "")\xa0\xa0\xa0\xa0$hashFontFileTypes.Add(".ttf", " (TrueType)")\xa0\xa0\xa0\xa0  \n$hashFontFileTypes.Add(".ttc", " (TrueType)")\xa0\xa0\xa0\xa0$hashFontFileTypes.Add(".otf", " (OpenType)")\xa0\xa0\xa0\xa0  \n# Type 1 fonts require handling multiple resource files.\xa0\xa0\xa0\xa0# Not supported in this script\xa0\xa0\xa0\xa0  \n#$hashFontFileTypes.Add(".mmm", "")\xa0\xa0\xa0\xa0#$hashFontFileTypes.Add(".pbf", "")\xa0\xa0\xa0\xa0#$hashFontFileTypes.Add(".pfm", "")\xa0\xa0\xa0\xa0  \n# Initialize variables\xa0\xa0\xa0\xa0$invocation = (Get-Variable MyInvocation -Scope 0).Value\xa0\xa0\xa0\xa0  \n$scriptPath = Split-Path $Invocation.MyCommand.Path\xa0\xa0\xa0\xa0$fontRegistryPath = "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts"\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0# Load C# code\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0  \n$fontCSharpCode = @\'\xa0\xa0\xa0\xa0using System;\xa0\xa0\xa0\xa0using System.Collections.Generic;\xa0\xa0\xa0\xa0using System.Text;\xa0\xa0\xa0\xa0using System.IO;\xa0\xa0\xa0\xa0  \nusing System.Runtime.InteropServices;\xa0\xa0\xa0\xa0namespace FontResource\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0public class AddRemoveFonts\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0private static IntPtr HWND_BROADCAST = new IntPtr(0xffff);\xa0\xa0\xa0\xa0  \nprivate static IntPtr HWND_TOP = new IntPtr(0);\xa0\xa0\xa0\xa0private static IntPtr HWND_BOTTOM = new IntPtr(1);\xa0\xa0\xa0\xa0  \nprivate static IntPtr HWND_TOPMOST = new IntPtr(-1);\xa0\xa0\xa0\xa0private static IntPtr\xa0  \nHWND_NOTOPMOST = new IntPtr(-2);\xa0\xa0\xa0\xa0private static IntPtr HWND_MESSAGE = new IntPtr(-3);\xa0\xa0\xa0\xa0  \n[DllImport("gdi32.dll")]\xa0\xa0\xa0\xa0static extern int AddFontResource(string lpFilename);\xa0\xa0\xa0\xa0  \n[DllImport("gdi32.dll")]\xa0\xa0\xa0\xa0static extern int RemoveFontResource(string lpFileName);\xa0\xa0\xa0\xa0  \n[DllImport("user32.dll",CharSet=CharSet.Auto)]\xa0\xa0\xa0\xa0private static extern int SendMessage(IntPtr hWnd, WM wMsg, IntPtr wParam, IntPtr lParam);\xa0\xa0\xa0\xa0  \n[return: MarshalAs(UnmanagedType.Bool)]\xa0\xa0\xa0\xa0[DllImport("user32.dll", SetLastError = true)]\xa0\xa0\xa0\xa0  \nprivate static extern bool PostMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);\xa0\xa0\xa0\xa0  \npublic static int AddFont(string fontFilePath) {\xa0\xa0\xa0\xa0FileInfo fontFile = new FileInfo(fontFilePath);\xa0\xa0\xa0\xa0  \nif (!fontFile.Exists)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0return 0;\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \ntry\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0int retVal = AddFontResource(fontFilePath);\xa0\xa0\xa0\xa0//This version of SendMessage is a blocking call until all windows respond.  \n//long result = SendMessage(HWND_BROADCAST, WM.FONTCHANGE, IntPtr.Zero, IntPtr.Zero);\xa0\xa0\xa0\xa0  \n//Alternatively PostMessage instead of SendMessage to prevent application hang\xa0\xa0\xa0\xa0bool posted = PostMessage(HWND_BROADCAST,\xa0  \nWM.FONTCHANGE, IntPtr.Zero, IntPtr.Zero);\xa0\xa0\xa0\xa0return retVal;\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0catch\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0return 0;\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \npublic static int RemoveFont(string fontFileName)\xa0  \n{\xa0\xa0\xa0\xa0//FileInfo fontFile = new FileInfo(fontFileName);\xa0\xa0\xa0\xa0//if (!fontFile.Exists)\xa0\xa0\xa0\xa0//{\xa0\xa0\xa0\xa0// return false;\xa0\xa0\xa0\xa0  \n//}\xa0\xa0\xa0\xa0try\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0int retVal = RemoveFontResource(fontFileName);\xa0\xa0\xa0\xa0  \n//This version of SendMessage is a blocking call until all windows respond.\xa0\xa0\xa0\xa0  \n//long result = SendMessage(HWND_BROADCAST, WM.FONTCHANGE, IntPtr.Zero, IntPtr.Zero);\xa0\xa0\xa0\xa0  \n//Alternatively PostMessage instead of SendMessage to prevent application hang\xa0\xa0\xa0\xa0bool posted =\xa0  \nPostMessage(HWND_BROADCAST, WM.FONTCHANGE, IntPtr.Zero, IntPtr.Zero);\xa0\xa0\xa0\xa0return retVal;\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \ncatch\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0return 0;\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \npublic enum WM : uint\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0NULL = 0x0000,\xa0\xa0\xa0\xa0CREATE = 0x0001,\xa0\xa0\xa0\xa0DESTROY = 0x0002,\xa0\xa0\xa0\xa0MOVE = 0x0003,\xa0\xa0\xa0\xa0  \nSIZE = 0x0005,\xa0\xa0\xa0\xa0ACTIVATE = 0x0006,\xa0\xa0\xa0\xa0SETFOCUS = 0x0007,\xa0\xa0\xa0\xa0KILLFOCUS = 0x0008,\xa0\xa0\xa0\xa0ENABLE = 0x000A,\xa0\xa0\xa0\xa0  \nSETREDRAW = 0x000B,\xa0\xa0\xa0\xa0SETTEXT = 0x000C,\xa0\xa0\xa0\xa0GETTEXT = 0x000D,\xa0\xa0\xa0\xa0GETTEXTLENGTH = 0x000E,\xa0\xa0\xa0\xa0PAINT = 0x000F,\xa0\xa0\xa0\xa0  \nCLOSE = 0x0010,\xa0\xa0\xa0\xa0QUERYENDSESSION = 0x0011,\xa0\xa0\xa0\xa0QUERYOPEN = 0x0013,\xa0\xa0\xa0\xa0ENDSESSION = 0x0016,\xa0\xa0\xa0\xa0  \nQUIT = 0x0012,\xa0\xa0\xa0\xa0ERASEBKGND = 0x0014,\xa0\xa0\xa0\xa0SYSCOLORCHANGE = 0x0015,\xa0\xa0\xa0\xa0SHOWWINDOW = 0x0018,\xa0\xa0\xa0\xa0  \nWININICHANGE = 0x001A,\xa0\xa0\xa0\xa0SETTINGCHANGE = WM.WININICHANGE,\xa0\xa0\xa0\xa0  \nDEVMODECHANGE = 0x001B,\xa0\xa0\xa0\xa0ACTIVATEAPP = 0x001C,\xa0\xa0\xa0\xa0FONTCHANGE = 0x001D,\xa0\xa0\xa0\xa0TIMECHANGE = 0x001E,\xa0\xa0\xa0\xa0  \nCANCELMODE = 0x001F,\xa0\xa0\xa0\xa0SETCURSOR = 0x0020,\xa0\xa0\xa0\xa0MOUSEACTIVATE = 0x0021,\xa0\xa0\xa0\xa0CHILDACTIVATE = 0x0022,  \nQUEUESYNC = 0x0023,\xa0\xa0\xa0\xa0GETMINMAXINFO = 0x0024,\xa0\xa0\xa0\xa0PAINTICON = 0x0026,\xa0\xa0\xa0\xa0ICONERASEBKGND = 0x0027,\xa0\xa0\xa0\xa0  \nNEXTDLGCTL = 0x0028,\xa0\xa0\xa0\xa0SPOOLERSTATUS = 0x002A,\xa0\xa0\xa0\xa0DRAWITEM = 0x002B,\xa0\xa0\xa0\xa0MEASUREITEM = 0x002C,\xa0\xa0\xa0\xa0  \nDELETEITEM = 0x002D,\xa0\xa0\xa0\xa0VKEYTOITEM = 0x002E,\xa0\xa0\xa0\xa0CHARTOITEM = 0x002F,\xa0\xa0\xa0\xa0SETFONT = 0x0030,\xa0\xa0\xa0\xa0  \nGETFONT = 0x0031,\xa0\xa0\xa0\xa0SETHOTKEY = 0x0032,\xa0\xa0\xa0\xa0  \nGETHOTKEY = 0x0033,\xa0\xa0\xa0\xa0QUERYDRAGICON = 0x0037,\xa0\xa0\xa0\xa0COMPAREITEM = 0x0039,\xa0\xa0\xa0\xa0GETOBJECT = 0x003D,\xa0\xa0\xa0\xa0  \nCOMPACTING = 0x0041,\xa0\xa0\xa0\xa0COMMNOTIFY = 0x0044,\xa0\xa0\xa0\xa0WINDOWPOSCHANGING = 0x0046,\xa0\xa0\xa0\xa0  \nWINDOWPOSCHANGED = 0x0047,\xa0\xa0\xa0\xa0POWER = 0x0048,\xa0\xa0\xa0\xa0COPYDATA = 0x004A,\xa0\xa0\xa0\xa0CANCELJOURNAL = 0x004B,\xa0\xa0\xa0\xa0  \nNOTIFY = 0x004E,\xa0\xa0\xa0\xa0INPUTLANGCHANGEREQUEST = 0x0050,\xa0\xa0\xa0\xa0INPUTLANGCHANGE = 0x0051,\xa0\xa0\xa0\xa0  \nTCARD = 0x0052,\xa0\xa0\xa0\xa0HELP = 0x0053,\xa0\xa0\xa0\xa0USERCHANGED = 0x0054,\xa0\xa0\xa0\xa0NOTIFYFORMAT = 0x0055,  \nCONTEXTMENU = 0x007B,\xa0\xa0\xa0\xa0STYLECHANGING = 0x007C,\xa0\xa0\xa0\xa0STYLECHANGED = 0x007D,\xa0\xa0\xa0\xa0DISPLAYCHANGE = 0x007E,\xa0\xa0\xa0\xa0GETICON = 0x007F,\xa0\xa0\xa0\xa0  \nSETICON = 0x0080,\xa0\xa0\xa0\xa0NCCREATE = 0x0081,\xa0\xa0\xa0\xa0NCDESTROY = 0x0082,\xa0\xa0\xa0\xa0NCCALCSIZE = 0x0083,\xa0\xa0\xa0\xa0  \nNCHITTEST = 0x0084,\xa0\xa0\xa0\xa0NCPAINT = 0x0085,\xa0\xa0\xa0\xa0NCACTIVATE = 0x0086,\xa0\xa0\xa0\xa0GETDLGCODE = 0x0087,\xa0\xa0\xa0\xa0  \nSYNCPAINT = 0x0088,\xa0\xa0\xa0\xa0NCMOUSEMOVE = 0x00A0,\xa0\xa0\xa0\xa0NCLBUTTONDOWN = 0x00A1,\xa0\xa0\xa0\xa0NCLBUTTONUP = 0x00A2,\xa0\xa0\xa0\xa0  \nNCLBUTTONDBLCLK = 0x00A3,\xa0\xa0\xa0\xa0NCRBUTTONDOWN = 0x00A4,\xa0\xa0\xa0\xa0NCRBUTTONUP = 0x00A5,\xa0\xa0\xa0\xa0  \nNCRBUTTONDBLCLK = 0x00A6,\xa0\xa0\xa0\xa0NCMBUTTONDOWN = 0x00A7,\xa0\xa0\xa0\xa0NCMBUTTONUP = 0x00A8,\xa0\xa0\xa0\xa0  \nNCMBUTTONDBLCLK = 0x00A9,\xa0\xa0\xa0\xa0NCXBUTTONDOWN = 0x00AB,\xa0\xa0\xa0\xa0NCXBUTTONUP = 0x00AC,\xa0\xa0\xa0\xa0  \nNCXBUTTONDBLCLK = 0x00AD,\xa0\xa0\xa0\xa0INPUT_DEVICE_CHANGE = 0x00FE,\xa0\xa0\xa0\xa0  \nINPUT = 0x00FF,\xa0\xa0\xa0\xa0KEYFIRST = 0x0100,\xa0\xa0\xa0\xa0KEYDOWN = 0x0100,\xa0\xa0\xa0\xa0KEYUP = 0x0101,\xa0\xa0\xa0\xa0  \nCHAR = 0x0102,\xa0\xa0\xa0\xa0DEADCHAR = 0x0103,\xa0\xa0\xa0\xa0SYSKEYDOWN = 0x0104,\xa0\xa0\xa0\xa0SYSKEYUP = 0x0105,\xa0\xa0\xa0\xa0  \nSYSCHAR = 0x0106,\xa0\xa0\xa0\xa0SYSDEADCHAR = 0x0107,\xa0\xa0\xa0\xa0UNICHAR = 0x0109,\xa0\xa0\xa0\xa0KEYLAST = 0x0109,\xa0\xa0\xa0\xa0  \nIME_STARTCOMPOSITION = 0x010D,\xa0\xa0\xa0\xa0IME_ENDCOMPOSITION = 0x010E,\xa0\xa0\xa0\xa0IME_COMPOSITION = 0x010F,\xa0\xa0\xa0\xa0  \nIME_KEYLAST = 0x010F,\xa0\xa0\xa0\xa0INITDIALOG = 0x0110,\xa0\xa0\xa0\xa0COMMAND = 0x0111,\xa0\xa0\xa0\xa0SYSCOMMAND = 0x0112,\xa0\xa0\xa0\xa0  \nTIMER = 0x0113,\xa0\xa0\xa0\xa0HSCROLL = 0x0114,\xa0\xa0\xa0\xa0VSCROLL = 0x0115,\xa0\xa0\xa0\xa0INITMENU = 0x0116,\xa0\xa0\xa0\xa0  \nINITMENUPOPUP = 0x0117,\xa0\xa0\xa0\xa0MENUSELECT = 0x011F,\xa0\xa0\xa0\xa0MENUCHAR = 0x0120,\xa0\xa0\xa0\xa0  \nENTERIDLE = 0x0121,\xa0\xa0\xa0\xa0MENURBUTTONUP = 0x0122,\xa0\xa0\xa0\xa0MENUDRAG = 0x0123,\xa0\xa0\xa0\xa0MENUGETOBJECT = 0x0124,\xa0\xa0\xa0\xa0  \nUNINITMENUPOPUP = 0x0125,\xa0\xa0\xa0\xa0MENUCOMMAND = 0x0126,\xa0\xa0\xa0\xa0CHANGEUISTATE = 0x0127,\xa0\xa0\xa0\xa0UPDATEUISTATE = 0x0128,  \nQUERYUISTATE = 0x0129,\xa0\xa0\xa0\xa0CTLCOLORMSGBOX = 0x0132,\xa0\xa0\xa0\xa0CTLCOLOREDIT = 0x0133,\xa0\xa0\xa0\xa0CTLCOLORLISTBOX = 0x0134,\xa0\xa0\xa0\xa0  \nCTLCOLORBTN = 0x0135,\xa0\xa0\xa0\xa0CTLCOLORDLG = 0x0136,\xa0\xa0\xa0\xa0CTLCOLORSCROLLBAR = 0x0137,\xa0\xa0\xa0\xa0CTLCOLORSTATIC = 0x0138,\xa0\xa0\xa0\xa0  \nMOUSEFIRST = 0x0200,\xa0\xa0\xa0\xa0MOUSEMOVE = 0x0200,\xa0\xa0\xa0\xa0LBUTTONDOWN = 0x0201,\xa0\xa0\xa0\xa0LBUTTONUP = 0x0202,\xa0\xa0\xa0\xa0  \nLBUTTONDBLCLK = 0x0203,\xa0\xa0\xa0\xa0RBUTTONDOWN = 0x0204,\xa0\xa0\xa0\xa0RBUTTONUP = 0x0205,\xa0\xa0\xa0\xa0RBUTTONDBLCLK = 0x0206,\xa0\xa0\xa0\xa0MBUTTONDOWN = 0x0207,\xa0\xa0\xa0\xa0  \nMBUTTONUP = 0x0208,\xa0\xa0\xa0\xa0MBUTTONDBLCLK = 0x0209,\xa0\xa0\xa0\xa0MOUSEWHEEL = 0x020A,\xa0\xa0\xa0\xa0XBUTTONDOWN = 0x020B,\xa0\xa0\xa0\xa0  \nXBUTTONUP = 0x020C,\xa0\xa0\xa0\xa0XBUTTONDBLCLK = 0x020D,\xa0\xa0\xa0\xa0MOUSEHWHEEL = 0x020E,\xa0\xa0\xa0\xa0MOUSELAST = 0x020E,\xa0\xa0\xa0\xa0  \nPARENTNOTIFY = 0x0210,\xa0\xa0\xa0\xa0ENTERMENULOOP = 0x0211,\xa0\xa0\xa0\xa0EXITMENULOOP = 0x0212,\xa0\xa0\xa0\xa0NEXTMENU = 0x0213,\xa0\xa0\xa0\xa0  \nSIZING = 0x0214,\xa0\xa0\xa0\xa0CAPTURECHANGED = 0x0215,\xa0\xa0\xa0\xa0MOVING = 0x0216,\xa0\xa0\xa0\xa0POWERBROADCAST = 0x0218,\xa0\xa0\xa0\xa0  \nDEVICECHANGE = 0x0219,\xa0\xa0\xa0\xa0MDICREATE = 0x0220,\xa0\xa0\xa0\xa0MDIDESTROY = 0x0221,\xa0\xa0\xa0\xa0MDIACTIVATE = 0x0222,\xa0\xa0\xa0\xa0  \nMDIRESTORE = 0x0223,\xa0\xa0\xa0\xa0MDINEXT = 0x0224,\xa0\xa0\xa0\xa0MDIMAXIMIZE = 0x0225,\xa0\xa0\xa0\xa0MDITILE = 0x0226,\xa0\xa0\xa0\xa0  \nMDICASCADE = 0x0227,\xa0\xa0\xa0\xa0MDIICONARRANGE = 0x0228,\xa0\xa0\xa0\xa0MDIGETACTIVE = 0x0229,\xa0\xa0\xa0\xa0MDISETMENU = 0x0230,\xa0\xa0\xa0\xa0  \nENTERSIZEMOVE = 0x0231,\xa0\xa0\xa0\xa0EXITSIZEMOVE = 0x0232,\xa0\xa0\xa0\xa0DROPFILES = 0x0233,\xa0\xa0\xa0\xa0MDIREFRESHMENU = 0x0234,\xa0\xa0\xa0\xa0  \nIME_SETCONTEXT = 0x0281,\xa0\xa0\xa0\xa0IME_NOTIFY = 0x0282,\xa0\xa0\xa0\xa0IME_CONTROL = 0x0283,\xa0\xa0\xa0\xa0IME_COMPOSITIONFULL = 0x0284,\xa0\xa0\xa0\xa0  \nIME_SELECT = 0x0285,\xa0\xa0\xa0\xa0IME_CHAR = 0x0286,\xa0\xa0\xa0\xa0IME_REQUEST = 0x0288,\xa0\xa0\xa0\xa0IME_KEYDOWN = 0x0290,\xa0\xa0\xa0\xa0  \nIME_KEYUP = 0x0291,\xa0\xa0\xa0\xa0MOUSEHOVER = 0x02A1,\xa0\xa0\xa0\xa0MOUSELEAVE = 0x02A3,\xa0\xa0\xa0\xa0NCMOUSEHOVER = 0x02A0,\xa0\xa0\xa0\xa0  \nNCMOUSELEAVE = 0x02A2,\xa0\xa0\xa0\xa0WTSSESSION_CHANGE = 0x02B1,\xa0\xa0\xa0\xa0TABLET_FIRST = 0x02c0,\xa0\xa0\xa0\xa0TABLET_LAST = 0x02df,\xa0\xa0\xa0\xa0  \nCUT = 0x0300,\xa0\xa0\xa0\xa0COPY = 0x0301,\xa0\xa0\xa0\xa0PASTE = 0x0302,\xa0\xa0\xa0\xa0CLEAR = 0x0303,\xa0\xa0\xa0\xa0UNDO = 0x0304,\xa0\xa0\xa0\xa0RENDERFORMAT = 0x0305,\xa0\xa0\xa0\xa0  \nRENDERALLFORMATS = 0x0306,\xa0\xa0\xa0\xa0DESTROYCLIPBOARD = 0x0307,\xa0\xa0\xa0\xa0DRAWCLIPBOARD = 0x0308,\xa0\xa0\xa0\xa0PAINTCLIPBOARD = 0x0309,  \nVSCROLLCLIPBOARD = 0x030A,\xa0\xa0\xa0\xa0SIZECLIPBOARD = 0x030B,\xa0\xa0\xa0\xa0ASKCBFORMATNAME = 0x030C,\xa0\xa0\xa0\xa0CHANGECBCHAIN = 0x030D,\xa0\xa0\xa0\xa0  \nHSCROLLCLIPBOARD = 0x030E,\xa0\xa0\xa0\xa0QUERYNEWPALETTE = 0x030F,\xa0\xa0\xa0\xa0PALETTEISCHANGING = 0x0310,\xa0\xa0\xa0\xa0PALETTECHANGED = 0x0311,\xa0\xa0\xa0\xa0  \nHOTKEY = 0x0312,\xa0\xa0\xa0\xa0PRINT = 0x0317,\xa0\xa0\xa0\xa0PRINTCLIENT = 0x0318,\xa0\xa0\xa0\xa0APPCOMMAND = 0x0319,\xa0\xa0\xa0\xa0THEMECHANGED = 0x031A,\xa0\xa0\xa0\xa0  \nCLIPBOARDUPDATE = 0x031D,\xa0\xa0\xa0\xa0  \nDWMCOMPOSITIONCHANGED = 0x031E,\xa0\xa0\xa0\xa0DWMNCRENDERINGCHANGED = 0x031F,\xa0\xa0\xa0\xa0DWMCOLORIZATIONCOLORCHANGED = 0x0320,\xa0\xa0\xa0\xa0  \nDWMWINDOWMAXIMIZEDCHANGE = 0x0321,\xa0\xa0\xa0\xa0GETTITLEBARINFOEX = 0x033F,\xa0\xa0\xa0\xa0HANDHELDFIRST = 0x0358,\xa0\xa0\xa0\xa0  \nHANDHELDLAST = 0x035F,\xa0\xa0\xa0\xa0AFXFIRST = 0x0360,\xa0\xa0\xa0\xa0AFXLAST = 0x037F,\xa0\xa0\xa0\xa0PENWINFIRST = 0x0380,\xa0\xa0\xa0\xa0  \nPENWINLAST = 0x038F,\xa0\xa0\xa0\xa0APP = 0x8000,\xa0\xa0\xa0\xa0USER = 0x0400,\xa0\xa0\xa0\xa0CPL_LAUNCH = USER+0x1000,\xa0\xa0\xa0\xa0  \nCPL_LAUNCHED = USER+0x1001,\xa0\xa0\xa0\xa0SYSTIMER = 0x118\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0\'@\xa0\xa0\xa0\xa0Add-Type $fontCSharpCode  \n#*******************************************************************\xa0\xa0\xa0\xa0  \n# Declare Functions\xa0\xa0\xa0\xa0#*******************************************************************\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0  \n# Function Get-SpecialFolder()\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Purpose: Convert a CSIDL string to a folder parh string\xa0\xa0\xa0\xa0  \n#\xa0\xa0\xa0\xa0# Input: $id CSIDL folder identifier string\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Returns: Folder path\xa0\xa0\xa0\xa0  \n#\xa0\xa0\xa0\xa0#*******************************************************************\xa0\xa0\xa0\xa0  \nfunction Get-SpecialFolder($id)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0$shell = New-Object \u2013COM "Shell.Application"\xa0\xa0\xa0\xa0  \n$folder = $shell.NameSpace($id)\xa0\xa0\xa0\xa0$specialFolder = $folder.Self.Path\xa0\xa0\xa0\xa0$specialFolder\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0# Function Add-SingleFont()\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n# Purpose: Install a font file\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Input: $file Font file path\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Returns: 0 - success, 1 - failure\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0function Add-SingleFont($filePath)\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0try\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0[string]$filePath = (resolve-path $filePath).path\xa0\xa0\xa0\xa0[string]$fileDir = split-path $filePath\xa0\xa0\xa0\xa0  \n[string]$fileName = split-path $filePath -leaf\xa0\xa0\xa0\xa0[string]$fileExt = (Get-Item $filePath).extension\xa0\xa0\xa0\xa0  \n[string]$fileBaseName = $fileName -replace($fileExt ,"")\xa0\xa0\xa0\xa0$shell = new-object -com shell.application\xa0\xa0\xa0\xa0  \n$myFolder = $shell.Namespace($fileDir)\xa0\xa0\xa0\xa0$fileobj = $myFolder.Items().Item($fileName)\xa0\xa0\xa0\xa0  \n$fontName = $myFolder.GetDetailsOf($fileobj,21)\xa0\xa0\xa0\xa0if ($fontName -eq "") { $fontName = $fileBaseName }\xa0\xa0\xa0\xa0copy-item $filePath -destination $fontsFolderPath\xa0\xa0\xa0\xa0  \n$fontFinalPath = Join-Path $fontsFolderPath $fileName\xa0\xa0\xa0\xa0$retVal = [FontResource.AddRemoveFonts]::AddFont($fontFinalPath)\xa0\xa0\xa0\xa0  \nif ($retVal -eq 0) {\xa0\xa0\xa0\xa0Write-Host "Font `\'$($filePath)`\'`\' installation failed"\xa0\xa0\xa0\xa0Write-Host ""\xa0\xa0\xa0\xa01\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0Write-Host "Font `\'$($filePath)`\' installed successfully"\xa0\xa0\xa0\xa0Write-Host ""\xa0\xa0\xa0\xa0Set-ItemProperty -path "$($fontRegistryPath)"\xa0  \n-name "$($fontName)$($hashFontFileTypes.item($fileExt))" -value "$($fileName)" -type STRING\xa0\xa0\xa0\xa00\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0""\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \ncatch\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0Write-Host "An error occured installing `\'$($filePath)`\'"\xa0\xa0\xa0\xa0Write-Host ""\xa0\xa0\xa0\xa0  \nWrite-Host "$($error[0].ToString())"\xa0\xa0\xa0\xa0Write-Host ""\xa0\xa0\xa0\xa0$error.clear()\xa0\xa0\xa0\xa01\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0  \n# Function Show-Usage()\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Purpose: Shows the correct usage to the user.\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n# Input: None\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Output: Help messages are displayed on screen.\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0function Show-Usage()\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0$usage = @\'\xa0\xa0\xa0\xa0Add-Font.ps1\xa0\xa0\xa0\xa0This script is used to install Windows fonts.\xa0\xa0\xa0\xa0  \nUsage:\xa0\xa0\xa0\xa0Add-Font.ps1 -help | -path "<Font file or folder path>"\xa0\xa0\xa0\xa0Parameters:\xa0\xa0\xa0\xa0-help\xa0\xa0\xa0\xa0  \nDisplays usage information.\xa0\xa0\xa0\xa0-path\xa0\xa0\xa0\xa0May be either the path to a font file to install or the path to a folder\xa0\xa0\xa0\xa0  \ncontaining font files to install. Valid file types are .fon, .fnt,\xa0\xa0\xa0\xa0.ttf,.ttc, .otf, .mmm, .pbf, and .pfm\xa0\xa0\xa0\xa0  \nExamples:\xa0\xa0\xa0\xa0Add-Font.ps1\xa0\xa0\xa0\xa0Add-Font.ps1 -path "C:\\Custom Fonts\\MyFont.ttf"\xa0\xa0\xa0\xa0Add-Font.ps1 -path\xa0  \n"C:\\Custom Fonts"\xa0\xa0\xa0\xa0\'@\xa0\xa0\xa0\xa0$usage\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0#*******************************************************************\xa0\xa0\xa0\xa0  \n# Function Process-Arguments()\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Purpose: To validate parameters and their values\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n# Input: All parameters\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0# Output: Exit script if parameters are invalid\xa0\xa0\xa0\xa0#\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0function Process-Arguments()\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0## Write-host \'Processing Arguments\'\xa0\xa0\xa0\xa0if ($unnamedArgs.Length -gt 0)\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0write-host "The following arguments are not defined:"\xa0\xa0\xa0\xa0$unnamedArgs\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \nif ($help -eq $true)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0Show-Usage\xa0\xa0\xa0\xa0break\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0if ((Test-Path $path -PathType Leaf) -eq $true)\xa0\xa0\xa0\xa0  \n{\xa0\xa0\xa0\xa0If ($hashFontFileTypes.ContainsKey((Get-Item $path).Extension))\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0$retVal = Add-SingleFont $path\xa0\xa0\xa0\xa0  \nif ($retVal -ne 0)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0exit 1\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0exit 0\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0"`\'$($path)`\' not a valid font file type"\xa0\xa0\xa0\xa0""\xa0\xa0\xa0\xa0exit 1\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}  \nelseif ((Test-Path $path -PathType Container) -eq $true)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0$bErrorOccured = $false\xa0\xa0\xa0\xa0foreach($file in (Get-Childitem $path))  \n{\xa0\xa0\xa0\xa0if ($hashFontFileTypes.ContainsKey($file.Extension))\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0$retVal = Add-SingleFont (Join-Path $path $file.Name)\xa0\xa0\xa0\xa0  \nif ($retVal -ne 0)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0$bErrorOccured = $true\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0"`\'$(Join-Path $path $file.Name)`\' not a valid font file type"\xa0\xa0\xa0\xa0""\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}  \nIf ($bErrorOccured -eq $true)\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0exit 1\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0exit 0\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0else\xa0\xa0\xa0\xa0{\xa0\xa0\xa0\xa0"`\'$($path)`\' not found"\xa0\xa0\xa0\xa0""\xa0\xa0\xa0\xa0exit 1\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0}\xa0\xa0\xa0\xa0  \n#*******************************************************************\xa0\xa0\xa0\xa0# Main Script\xa0\xa0\xa0\xa0  \n#*******************************************************************  \n$fontsFolderPath = Get-SpecialFolder($CSIDL_FONTS)\xa0\xa0\xa0\xa0Process-Arguments\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 5 \u2013"})," Insert the folder path for the required fonts and click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_7_img-5",src:t(178914).A+"",width:"732",height:"559"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 6 \u2013"})," Select ",(0,i.jsx)(n.strong,{children:"Once or when forced"})," and click ",(0,i.jsx)(n.strong,{children:"Next"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_9_img-6",src:t(320309).A+"",width:"733",height:"559"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 7 \u2013"})," Name the policy and click ",(0,i.jsx)(n.strong,{children:"Finish"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_11_img-7",src:t(397521).A+"",width:"730",height:"556"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 8 \u2013"})," Run ",(0,i.jsx)(n.code,{children:"GPUPDATE /FORCE"})," on theclient machine."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create a GPO and link it to the required scope."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a PP Scripts Manager policy and click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Leave ",(0,i.jsx)(n.strong,{children:"Apply this policy to computer (default)"})," checked and click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Select ",(0,i.jsx)(n.strong,{children:"PowerShell Script"})," from the drop-down and paste the script to install fonts."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_5_img-3",src:t(103946).A+"",width:"732",height:"561"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["This script to Add Fonts from PowerShell is acquired from Microsoft Doc website. For more information see the Microsoft article on ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/archive/blogs/deploymentguys/adding-and-removing-fonts-with-windows-powershell",children:"Adding and Removing Fonts with Windows PowerShell"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Insert the folder path for the required fonts and click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_7_img-5",src:t(178914).A+"",width:"732",height:"559"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Select ",(0,i.jsx)(n.strong,{children:"Once or when forced"})," radio button and click ",(0,i.jsx)(n.strong,{children:"Next"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_9_img-6",src:t(320309).A+"",width:"733",height:"559"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Name the policy and click ",(0,i.jsx)(n.strong,{children:"Finish"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"467_11_img-7",src:t(397521).A+"",width:"730",height:"556"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"GPUPDATE /FORCE"})," on the client machine."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);