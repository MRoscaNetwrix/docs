"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[746497],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(296540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},842958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"threatprevention/admin/templates/folder/scripts/passwordneverexpires","title":"Password Never Expires Custom Script","description":"The following C# script sends an email notification to the specified administrator when an Active Directory account is set to have its password never expire.","source":"@site/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordneverexpires.md","sourceDirName":"threatprevention/admin/templates/folder/scripts","slug":"/threatprevention/admin/templates/folder/scripts/passwordneverexpires","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordneverexpires","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordneverexpires.md","tags":[],"version":"current","frontMatter":{},"sidebar":"threatPreventionSidebar","previous":{"title":"Password Changes Custom Script","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordchanges"},"next":{"title":"Password Rejection Custom Script","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordrejection"}}');var s=n(474848),i=n(28453);const a={},o="Password Never Expires Custom Script",l={},c=[];function p(e){const t={a:"a",code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"password-never-expires-custom-script",children:"Password Never Expires Custom Script"})}),"\n",(0,s.jsx)(t.p,{children:"The following C# script sends an email notification to the specified administrator when an Active Directory account is set to have its password never expire."}),"\n",(0,s.jsx)(t.p,{children:"The following environmental variables must be added to the script prior to execution:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"SMTPHOST \u2013 Name of the organization\u2019s SMTP server"}),"\n",(0,s.jsx)(t.li,{children:"SMTPPORT \u2013 Port used by the organization\u2019s SMTP server"}),"\n",(0,s.jsxs)(t.li,{children:["SMTPENABLESSL \u2013 Indicates whether SSL is enabled or disabled on the SMTP server","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"False = Do not use SSL"}),"\n",(0,s.jsx)(t.li,{children:"True = Use SSL"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"SMTPFROM \u2013 Valid email account sending the email to the recipient"}),"\n",(0,s.jsx)(t.li,{children:"SMTPID \u2013 Valid username for SMTP server within the user's environment"}),"\n",(0,s.jsx)(t.li,{children:"SMTPPwD \u2013 Valid password for the username above"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In the Templates > Actions folder in the Navigation pane, the ",(0,s.jsx)(t.em,{children:"ADChanges: Notify Admin that account now has Password Never Expires"})," template is preconfigured to use this action script."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"javascript:void(0);",children:"Copy"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'namespace ScriptNamespace  \n{  \nusing System;  \nusing System.Collections;  \nusing System.IO;  \nusing System.Text;  \nusing SI.Common.Messages;  \nusing SI.SIMonitor.ConsoleMessages.Helpers;  \nusing System.Net.Mail;  \nusing System.DirectoryServices;\xa0  \npublic class ScriptClass  \n{  \nprivate const string SMTPHOST = "mail.MyDomain.com";  \nprivate const int SMTPPORT = 25;  \nprivate const bool SMTPENABLESSL = false;  \nprivate const bool SMTPUSEDEFAULTCREDENTIALS = true;  \nprivate const bool SMTPHTML = true;  \nprivate const string SMTPFROM = "From@MyDomain.by";  \nprivate const string SMTPID = "username";  \nprivate const string SMTPPWD = "password";  \nprivate EventConsumerHelper helper = null;  \nprivate const string kEmailAttribute = "mail";  \nprivate const string kAccountExpiresAttr = "accountExpires";  \nprivate const string kAccountExpiresValue = "account never expires";\xa0  \n/// Required class constructor\xa0  \npublic ScriptClass (EventConsumerHelper ecHelper)  \n{  \nthis.helper = exHelper;  \n}\xa0  \npublic virtual void ScriptMain()  \n{  \nstring SMTPTO = GetStringAttribute(helper.Perpetrator,kEmailAttribute);  \nif (strong.IsNullOrEmpty(SMTPTO))  \nthrow new Exception ("AD attribute \'email\' is empty);\xa0  \nstring oldAttValue =GetAttributeFromHash(helper.OldAttributes,kAccountExpiresAttr);  \nif (!string.IsNullOrEmpty(oldAttValue))  \nif (oldAttValue.ToLower().Equals(kAccountExpiresValue))  \nreturn;\xa0  \nstring newAttValue =\xa0  \nGetAttributeFromHash(helper.NewAttributes,kAccountExpiresAttr);  \nif (string.IsNullOrEmpty(newAttValue))  \nreturn;\xa0  \nif (!newAttValue.ToLower().Equals(kAccountExpiresValue))  \nReturn\xa0  \nMailMessage msg = new MailMessage();  \nmsg.From = new MailAddress(SMTPFROM);  \nmsg.To.Add(SMTPTO);  \nmsg.Priority = MailPriority.High;  \nmsg.Subject = helper.EventNameTranslated;\xa0  \nStringBuilder sb = new StringBuilder();  \nsb.AppendLine("<html>");  \nsb.AppendLine("<body>");  \nsb.AppendLine(String.Format("EventName: {0}<br>", helper.EventName));  \nsb.AppendLine(String.Format("TimeLoggedUtc: {0}<br>", helper.TimeLoggedUtc.ToString("MMMM d, yyyy h:mm:ss tt")));  \nsb.AppendLine(String.Format("Account: {0} now has \'Password Never Expires\' option<br>", helper.DN));  \nsb.AppendLine(String.Format("Perpetrator: {0}<br>", helper.PerpetratorName));  \nsb.AppendLine("</body>");  \nsb.AppendLine("</html>");  \nstring body = sb.ToString();  \nmsg.Body = body;  \nmsg.IsBodyHtml = SMTPHTML;  \nSmtpClient client = new SmtpClient();  \nclient.Host = SMTPHOST;  \nclient.Port = SMTPPORT;  \nclient.EnableSsl = SMTPENABLESSL;  \nclient.UseDefaultCredentials = SMTPUSEDEFAULTCREDENTIALS;  \nif (!SMTPUSEDEFAULTCREDENTIALS)  \n{  \nclient.Credentials = new System.Net.NetworkCredential(SMTPID, SMTPPWD);  \n}  \nclient.DeliveryMethod = SmtpDeliveryMethod.Network;  \nclient.Send(msg);  \n}\xa0  \nprivate string GetStringAttribute(string dn, string AttributeName)  \n{  \nstring result = string.Empty;  \ntry  \n{  \nDirectoryEntry root = new DirectoryEntry();  \nusing (DirectorySearcher searcher = new DirectorySearcher(root))  \n{  \nsearcher.Filter = "(distinguishedName=" + dn + ")";  \nsearcher.PropertiesToLoad.Clear();  \nsearcher.ReferralChasing = ReferralChasingOption.All;  \nsearcher.PropertiesToLoad.Add(AttributeName);  \nsearcher.ClientTimeout = new TimeSpan(0, 0, 10);  \nvar searchResult = searcher.FindOne();  \nif (searchResult != null)  \n{  \nif (searchResult.Properties.Contains(AttributeName))  \n{  \nresult = searchResult.Properties[AttributeName][0] as string;  \n}  \n}  \n}  \n}  \ncatch { }  \nreturn result;  \n}  \nprivate string GetAttributeFromHash(System.Collections.Hashtable attributes, string attributename)  \n{  \nforeach (var att in attributes)  \n{  \nSystem.Collections.DictionaryEntry de = ((System.Collections.DictionaryEntry)(att));  \nif ((de.Key != null))  \n{  \nstring attrName = de.Key.ToString();  \nif (!string.IsNullOrEmpty(attrName))  \n{  \nif (attrName.Equals(attributename))  \n{  \nif (de.Value == null)  \nreturn string.Empty;  \nelse  \nreturn de.Value.ToString();  \n}  \n}  \n}  \n}  \nreturn string.Empty;  \n}  \n}  \n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);