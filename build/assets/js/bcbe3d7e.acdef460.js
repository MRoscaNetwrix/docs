"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[757808],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(296540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},799526:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"groupid/managementshell/dynasty/newdynasty","title":"New-Dynasty","description":"The New-Dynasty cmdlet creates a new Dynasty in Directory. A Dynasty is a Smart Group that can create and maintain the membership of other Smart Groups. A Dynasty retrieves data from Directory in the same manner as a Smart Group, but it divides the result set into child groups based on group-by field values.","source":"@site/docs/groupid/groupid/managementshell/dynasty/newdynasty.md","sourceDirName":"groupid/managementshell/dynasty","slug":"/groupid/managementshell/dynasty/newdynasty","permalink":"/docs/groupid/groupid/managementshell/dynasty/newdynasty","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/groupid/groupid/managementshell/dynasty/newdynasty.md","tags":[],"version":"current","frontMatter":{},"sidebar":"groupIdSidebar","previous":{"title":"Set-Contact","permalink":"/docs/groupid/groupid/managementshell/contact/setcontact"},"next":{"title":"Dynasty Commands","permalink":"/docs/groupid/groupid/managementshell/dynasty/overview"}}');var a=t(474848),i=t(28453);const s={},o="New-Dynasty",c={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Required Parameters",id:"required-parameters",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"new-dynasty",children:"New-Dynasty"})}),"\n",(0,a.jsx)(n.p,{children:"The New-Dynasty cmdlet creates a new Dynasty in Directory. A Dynasty is a Smart Group that can create and maintain the membership of other Smart Groups. A Dynasty retrieves data from Directory in the same manner as a Smart Group, but it divides the result set into child groups based on group-by field values."}),"\n",(0,a.jsx)(n.p,{children:"You can specify multiple group-by fields. For instance, with the group-by fields Country, State, and City, this commandlet creates a group for every distinct country value, then for each state within a country, and finally for each city in that state. All created child groups inherit those attributes of the parent that are set in the InheritedAttrs option."}),"\n",(0,a.jsx)(n.p,{children:"You can view events related to this commandlet in Directory Manager portal, against the History node in the left panel."}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"New-Dynasty  \n-TopManager <string>  \n-SamAccountName <string>  \n-Name <string>  \n-OrganizationalUnit <string>  \n-GroupScope <string>  \n-Type <string>  \n-SecurityType <string>  \n[-ChildContainer <string[]>]  \n[-Filters <string[]>]  \n[-Separator <string[]>]  \n[-ExcludeNestedLists <string>]  \n[-CreateFlatManagerialList <string>]  \n[-IncludeManagerAsMember <string>]  \n[-ChildPath <string>]  \n[-DynastyInheritance <bool>]  \n[-SearchContainers <string[]>]  \n[-SearchContainersScopeList <string[]>]  \n[-ObjectTypes <string[]>]  \n[-LdapFilter <string>]  \n[-IncludeRecipients <string[]>]  \n[-ExcludeRecipients <string[]>]  \n[-Storage <string>]  \n[-DataSourceType <string>]  \n[-SystemDSN <string>]  \n[-TableorView <string>]  \n[-DataSourceUserName <string>]  \n[-DataSourcePassword <string>]  \n[-FilePath <string>]  \n[-Server <string>]  \n[-Port <int>]  \n[-LDAPSearchContainer <string>]  \n[-DataSourceName <string>]  \n[-DataSourceConnection <string>]  \n[-DataSourceQuery <string>]  \n[-KeyMapDB <string>]  \n[-KeyMapAD <string>]  \n[-WindowsAthentication]  \n[-IsPasswordExpiryGroup]  \n[-DomainExpiration <int>]  \n[-ExpirationRange <int>]  \n[-IncludeDisabledUsers <string>]  \n[-IncludePasswordNeverExpireUsers <string>]  \n[-Script <string>]  \n[-ScriptFilePath <string>]  \n[-Sun_Container <string>]  \n[-GroupAlias <string>]  \n[-ManagedBy <string[]>]  \n[-DisplayName <string>]  \n[-MailEnabled <string>]  \n[-Description <string>]  \n[-AdditionalOwners <string[]>]  \n[-NotifyOptOutAdditionalOwners <string[]>]  \n[-Members <string[]>]  \n[-IdentityStoreId <int>]  \n[-SecurityToken <CustomClaimsPrincipal>]  \n[-Credential <pscredential>]  \n[<CommonParameters>]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"TopManager"}),"\n",(0,a.jsx)(n.li,{children:"SamAccountName"}),"\n",(0,a.jsx)(n.li,{children:"Name"}),"\n",(0,a.jsx)(n.li,{children:"OrganizationalUnit"}),"\n",(0,a.jsx)(n.li,{children:"GroupScope"}),"\n",(0,a.jsx)(n.li,{children:"Type"}),"\n",(0,a.jsx)(n.li,{children:"SecurityType"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example 1:"}),"\n",(0,a.jsx)(n.p,{children:"The following command creates a new mail-enabled, universal, distribution Dynasty and constructs its child groups for every distinct department value in the container specified by the OrganizationalUnit parameter using the credentials of current user logged-on to the identity store."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'New-Dynasty -OrganizationalUnit "OU=Recruiting,DC=HR,DC=Imanami,DC=US" -Name "Departmental" -SamAccountName\xa0\xa0"Departmental" -Type "Distribution" -GroupScope "Universal Group" -MailEnable True -GroupAlias "Departmental" -GroupBy\xa0\xa0"Department"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Example 2:"}),"\n",(0,a.jsxs)(n.p,{children:["The following command creates a new mail-enabled, universal, distribution, multi-level Dynasty with the group-by attributes Country, State and City based on the specified filters and separator, using the credentials set in the $Credentials environment variable. See the ",(0,a.jsx)(n.a,{href:"/docs/groupid/groupid/managementshell/parameters/setthecredential",children:"Set the $Credentials Environment Variable"})," topic for setting credentials in an environment variable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'New-Dynasty -OrganizationalUnit "OU=Recruiting,DC=HR,DC=Imanami,DC=US" -Name "Geographical" -GroupAlias "Geographical" -MailEnable True -SamAccountName "Geographical" -GroupScope "Universal Group" -Type "Distribution" -GroupBy "co","st","l" -Filters "Left 3","Left 3","%GROUPBY%\\*" -Separator "_","_","_" -Credential $Cred\n'})}),"\n",(0,a.jsx)(n.p,{children:"Example 3:"}),"\n",(0,a.jsx)(n.p,{children:"The following command creates a new universal, distribution Managerial Dynasty in the container specified by the OrganizationalUnit parameter, searches the direct reports of the top manager in the containers specified in the SearchContainers parameter including sub containers and creates them in the same container where the Top Manager resides."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'New-Dynasty -OrganizationalUnit "OU=Recruiting,DC=HR,DC=Imanami,DC=US" -Name "Managerial" -SamAccountName "Managerial" -GroupScope "Universal Group" -Type "Distribution" -SearchContainers "OU=Recruiting,OU=HR,DC=Imanami,DC=US","OU=Outsourcing,OU=HR,DC=Imanami,DC=US" -SearchContainersScopeList "2","2" -TopManager "CN=BrianRegan,CN=Users,DC=HR,DC=Imanami,DC=US" -ExcludeNestedLists False -ChildContainer ""\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);