"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[394478],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(296540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},104014:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/managing_application_handlers_1-3569562c4e7a5e38c61295d14a0eac92.webp"},352046:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"policypak/applicationsettings/preconfigured/firefox/applicationhandlers","title":"Managing Application Handlers","description":"Netwrix Endpoint Policy Manager (formerly PolicyPak) can manage which applications open outside of Firefox. The most common use cases are to open Adobe Reader instead of the internal Firefox PDF viewer, or launch WinZip when a ZIP file is encountered. These can be seen in Figure 51. The node only works with client-side extension (CSE) build 1560 or later.","source":"@site/docs/policypak/policypak/applicationsettings/preconfigured/firefox/applicationhandlers.md","sourceDirName":"policypak/applicationsettings/preconfigured/firefox","slug":"/policypak/applicationsettings/preconfigured/firefox/applicationhandlers","permalink":"/docs/policypak/policypak/applicationsettings/preconfigured/firefox/applicationhandlers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/applicationsettings/preconfigured/firefox/applicationhandlers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"Firefox: How do I set \\"Allow Now\\", \\"Allow and Remember\\" or \\"Block Plugin\\" as plug-ins are requested?","permalink":"/docs/policypak/policypak/applicationsettings/preconfigured/firefox/allowremember"},"next":{"title":"Bookmarks","permalink":"/docs/policypak/policypak/applicationsettings/preconfigured/firefox/bookmarks"}}');var a=i(474848),r=i(28453);const o={},s="Managing Application Handlers",l={},c=[];function p(e){const n={code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"managing-application-handlers",children:"Managing Application Handlers"})}),"\n",(0,a.jsx)(n.p,{children:"Netwrix Endpoint Policy Manager (formerly PolicyPak) can manage which applications open outside of Firefox. The most common use cases are to open Adobe Reader instead of the internal Firefox PDF viewer, or launch WinZip when a ZIP file is encountered. These can be seen in Figure 51. The node only works with client-side extension (CSE) build 1560 or later."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"managing_application_handlers",src:i(467638).A+"",width:"1569",height:"417"})}),"\n",(0,a.jsx)(n.p,{children:"Figure 51. Settings for opening applications outside of Firefox."}),"\n",(0,a.jsx)(n.p,{children:"You can use keyword MODE=REPLACE or MODE=MERGE. MODE=REPLACE will wipe out whatever the user has already selected, and put in your entries. MODE=MERGE will take the entries listed here and add them to whatever the user already has in place. However, there are some nuances to the Firefox application handlers as described below."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Understanding hard-coded handlers"}),"\n",(0,a.jsxs)(n.p,{children:['Some handlers are hard-coded, meaning they are always shown in the user interface (UI), even if they are scheduled to be removed by the "replace" mode. So, for example, if you set the PPAM FF Pak handler setting to the value below, you might expect the list would contain exactly one handler: zip ->',(0,a.jsx)(n.code,{children:" C:\\Program Files\\7-Zip\\7zFM.exe"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"MODE=REPLACE\xa0\xa0\xa0\xa0  \n.zip, APP: C:\\Program Files\\7-Zip\\7zFM.exe,\n"})}),"\n",(0,a.jsx)(n.p,{children:"However, that doesn't happen because the UI doesn't change for the hard-coded items. Your list might look different from what is shown in Figure 52."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"managing_application_handlers_1",src:i(104014).A+"",width:"686",height:"486"})}),"\n",(0,a.jsx)(n.p,{children:"Figure 52. Choosing how Firefox will handle downloaded files."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Internal versus external programs"}),"\n",(0,a.jsx)(n.p,{children:'Firefox prefers opening content internally to firing external programs whenever possible. Content that can be handled internally includes images, texts, HTML and XML code, and content with some special meaning for the Web (CSS, JS, etc.).\xa0 The actual decision is made based on so-called MIME type, and not on file extension. In the case of HTTP/HTTP surfing, Firefox usually uses the MIME type returned in the "content-type" response header, as shown in Figure 53.'}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"managing_application_handlers_2",src:i(480655).A+"",width:"1911",height:"1034"})}),"\n",(0,a.jsx)(n.p,{children:'Figure 53. The MIME type is determined by the "content-type" response header.'}),"\n",(0,a.jsxs)(n.p,{children:['If the MIME type is "',(0,a.jsx)(n.code,{children:"text/plain"}),'," "',(0,a.jsx)(n.code,{children:"text/html"}),'," "',(0,a.jsx)(n.code,{children:"text/css"}),'," "',(0,a.jsx)(n.code,{children:"image/jpeg"}),'," or any other special type, the file is opened internally. Even if the "content-type" header is not set in the web response, Firefox uses a sophisticated algorithm to guess the MIME type from actual content, and opens resources of special types internally. For this reason, even though it is possible to add handlers for JPG, HTML, HTM, TXT, etc., which will appear in the UI, Firefox will keep opening resources of such types internally. The general rule of thumb here is the following: when there is no handler for the given type and Firefox normally shows an "Open with" dialog box for this type, it fires Application Handler for the same type when there is a handler, as shown in Figure 54.']}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"managing_application_handlers_3",src:i(905772).A+"",width:"1240",height:"402"})}),"\n",(0,a.jsx)(n.p,{children:'Figure 54. The "Open with" dialog box.'}),"\n",(0,a.jsx)(n.p,{children:"MIME type returns from web servers"}),"\n",(0,a.jsx)(n.p,{children:'The actual behavior during Web surfing depends on the MIME type for the resource returned by "Web-server." Even though you have a handler for somethign like PDF (application/pdf) or ZIP (application/x-zip-compressed), it might not work for resources returned with a non-standard MIME type. If the returned MIME type is a generic type for binary resources (application/octet stream), or some type with no special meaning for Firefox, Firefox fires Application Handler to open files like this, as shown in Figure 55.'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"managing_application_handlers_4",src:i(566365).A+"",width:"674",height:"505"})}),"\n",(0,a.jsx)(n.p,{children:"Figure 55. The Firefox Application Handler."}),"\n",(0,a.jsx)(n.p,{children:'Otherwise, the file will be opened internally. The MIME type returned in response depends on "Web-Server" and resource settings, and it\'s up to the server to return the correct MIME type. The general rule of thumb here is similar to that in the second bullet point above. If Firefox shows an "Open with" dialog box when there is no handler for the resource, it fires Application Handler for the same resource if there is one.'})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},467638:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/managing_application_handlers-1d765908625105c5c3ef9e8b0a710ca7.webp"},480655:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/managing_application_handlers_2-e688de84d672c2758ccc81789ef9b786.webp"},566365:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/managing_application_handlers_4-1e93b276b4e9eab6cd4bade9b6ecfe17.webp"},905772:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/managing_application_handlers_3-ebc190c5dd5afc032ed925e67bc491a5.webp"}}]);