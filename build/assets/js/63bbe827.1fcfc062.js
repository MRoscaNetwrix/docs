"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[276792],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(296540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}},555388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"groupid/managementshell/identitystore/newidentitystore","title":"New-IdentityStore","description":"The commandlet New-IdentityStore creates a new identity store. This commandlet requires valid credentials and connectivity before it creates the store. However, this behavior can be overridden by specifying the IgnoreConnectionFail parameter.","source":"@site/docs/groupid/groupid/managementshell/identitystore/newidentitystore.md","sourceDirName":"groupid/managementshell/identitystore","slug":"/groupid/managementshell/identitystore/newidentitystore","permalink":"/docs/groupid/groupid/managementshell/identitystore/newidentitystore","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/groupid/groupid/managementshell/identitystore/newidentitystore.md","tags":[],"version":"current","frontMatter":{},"sidebar":"groupIdSidebar","previous":{"title":"Get-UserRole","permalink":"/docs/groupid/groupid/managementshell/identitystore/getuserrole"},"next":{"title":"Identity Store Commands","permalink":"/docs/groupid/groupid/managementshell/identitystore/overview"}}');var i=n(474848),o=n(28453);const a={},s="New-IdentityStore",d={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Required Parameters",id:"required-parameters",level:2}];function l(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"new-identitystore",children:"New-IdentityStore"})}),"\n",(0,i.jsx)(t.p,{children:"The commandlet New-IdentityStore creates a new identity store. This commandlet requires valid credentials and connectivity before it creates the store. However, this behavior can be overridden by specifying the IgnoreConnectionFail parameter."}),"\n",(0,i.jsxs)(t.p,{children:["This cmdlet uses dynamic parameters based on the value of ",(0,i.jsx)(t.em,{children:"IdentityStoreType"})," parameter. The parameters that become available depending on the values of ",(0,i.jsx)(t.em,{children:"IdentityStoreType"})," are as follows:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"IdentityStoreType: ActiveDirectory"}),"\n",(0,i.jsx)(t.p,{children:"Domain: The connection string / domain of the active directory."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"IdentityStoreType: MicrosoftAzure"}),"\n",(0,i.jsx)(t.p,{children:"Domain: The domain of the Microsoft Entra ID / Office365 store."}),"\n",(0,i.jsx)(t.p,{children:"AppId: The name of Directory Manager application registered in the Microsoft Entra ID admin panel."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"IdentityStoreType: GoogleWorkspace"}),"\n",(0,i.jsx)(t.p,{children:"AdminUsername: The username of the administrator of the Google Workspace account."}),"\n",(0,i.jsx)(t.p,{children:"P12CertificatePath: The path where the certificate file (.p12 extension) downloaded from Google Admin Console is placed (including the filename)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore  \n-IdentityStoreType <IdentityStoreType>  \n-IdentityStoreName <String>  \n-Credential <PSCredential>  \n[-Description <String>]  \n[-PassThru]  \n[-IgnoreConnectionFail]  \n[-IdentityStoreId <Int32>]  \n[-SecurityToken <CustomClaimsPrincipal>]  \n[-WarningAction <ActionPreference>]  \n[-InformationAction ActionPreference>]  \n[-WarningVariable <String>]  \n[-InformationVariable <String>]  \n[-PipelineVariable <String>]  \n[<CommonParameters>]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"IdentityStoreType"}),"\n",(0,i.jsx)(t.li,{children:"IdentityStoreName"}),"\n",(0,i.jsx)(t.li,{children:"Credential"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Example 1:"}),"\n",(0,i.jsx)(t.p,{children:"This example create a new Active Directory based identity store by explicitly specifying the credentials for the new identity store."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType ActiveDirectory -IdentityStoreName DemoAdStore2 -Credential $cred -Domain pucit.local\n"})}),"\n",(0,i.jsx)(t.p,{children:"NOTE: For an Active Directory based identity store, Domain parameter is mandatory."}),"\n",(0,i.jsx)(t.p,{children:"Example 2:"}),"\n",(0,i.jsx)(t.p,{children:"This example creates a new Active Directory based identity store by providing the secure credentials. Here $cred is an object of type PSCredential which was created by Get-Credential commandlet."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType ActiveDirectory -IdentityStoreName DemoAdStore2 -Credential $cred -Domain pucit.local\n"})}),"\n",(0,i.jsx)(t.p,{children:"Example 3:"}),"\n",(0,i.jsx)(t.p,{children:"This example creates an Microsoft Entra ID based identity store."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType MicrosoftAzure -IdentityStoreName DemoAzStore1 -UserName admin@mydomain.onmicrosoft.com -Password password123 -Domain mydomain.onmicrosoft.com -AppId 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'\n"})}),"\n",(0,i.jsx)(t.p,{children:"NOTE: In case of an Microsoft Entra ID based identity store, Domain and AppId parameters are mandatory."}),"\n",(0,i.jsx)(t.p,{children:"Example 4:"}),"\n",(0,i.jsx)(t.p,{children:"This example creates a Google Apps (Google Workspace) based identity store."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType GoogleWorkspace -IdentityStoreName DemoGStore1 -UserName svcacc@myproject-111222.iam.gserviceaccount.com -AdminUsername admin@mydomain.com -P12CertificatePath 'C:\\Keys\\gsuite\\key.p12'\n"})}),"\n",(0,i.jsx)(t.p,{children:"NOTE: For Google Apps based identity store, AdminUserName and P12CertificatePath parameters are mandatory. However, \u2018Password\u2019 parameter is ignored."}),"\n",(0,i.jsx)(t.p,{children:"Example 5:"}),"\n",(0,i.jsx)(t.p,{children:"This example creates Google Apps (G-Suite) based identity store using secure credentials."}),"\n",(0,i.jsx)(t.p,{children:"The $creds (an object of type PSCredential) object must contain the service account as username. The \u2018Password\u2019 property of this object can be anything but not empty."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType GoogleWorkspace -IdentityStoreName DemoGStore2 -Credential $creds -AdminUsername arslan@bibelotz.com -P12CertificatePath 'C:\\Keys\\gsuite\\key.p12'\n"})}),"\n",(0,i.jsx)(t.p,{children:"Example 6:"}),"\n",(0,i.jsx)(t.p,{children:"This example creates an Active Directory based identity store by ignoring the credential and connection details."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"New-IdentityStore -IdentityStoreType ActiveDirectory -IdentityStoreName DemoAdStore3 -UserName nouser -Password password123 -Domain nodomain.local -IgnoreConnectionFail\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);