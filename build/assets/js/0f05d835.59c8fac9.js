"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[643004],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var i=s(296540);const r={},n=i.createContext(r);function o(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(n.Provider,{value:t},e.children)}},400088:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask/index","title":"Update Entity Property Expressions Task","description":"Calculates either for all entities or for a list of entities the expressions and inserts the values in the database.","source":"@site/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask","slug":"/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask/","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateentitypropertyexpressionstask/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSaasSidebar","previous":{"title":"Update Classification Task","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/updateclassificationtask/"},"next":{"title":"Metadata","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/metadata/"}}');var r=s(474848),n=s(28453);const o={},a="Update Entity Property Expressions Task",d={},l=[{value:"Examples",id:"examples",level:2},{value:"Properties",id:"properties",level:2},{value:"Child Element: TaskEntityType",id:"child-element-taskentitytype",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"update-entity-property-expressions-task",children:"Update Entity Property Expressions Task"})}),"\n",(0,r.jsx)(t.p,{children:"Calculates either for all entities or for a list of entities the expressions and inserts the values in the database."}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'\n<UpdateEntityPropertyExpressionsTask Identifier="ComputeAllProperties" DisplayName_L1="Compute All Properties " AllEntityType="true"/>\n\n'})}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{children:"Details"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DisplayName_L1   required"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    String   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Display name of the task in language 1 (up to 16)."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"AllEntityType   default value: false"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    Boolean   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Launch to all entityTypes for the expression task.   ",(0,r.jsx)(t.em,{children:"Alternative definition"}),": If ",(0,r.jsx)(t.em,{children:"TaskType"})," is:   - TreeDimensionsRefreshTask: Refresh all dimensions."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"BatchSelectSize   default value: 0"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    Int32   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Defines the batch select size."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"BatchUpdateSize   default value: 0"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    Int32   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Defines the batch update size."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Dirty   default value: false"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    Boolean   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Initiate use only dirty resources."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Identifier   optional"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    String   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Unique identifier of the task."]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"child-element-taskentitytype",children:"Child Element: TaskEntityType"}),"\n",(0,r.jsx)(t.p,{children:"A task entity type defines the entity type on which the task is applied."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{children:"Details"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"EntityType   required"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    Int64   ",(0,r.jsx)(t.strong,{children:"Description"}),"   Identifier of the entity type that the task is to be applied on."]})]})})]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);