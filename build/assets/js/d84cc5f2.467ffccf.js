"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[904784],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var r=s(296540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}},884736:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"usercube/integration-guide/executables/references/csv-transform/index","title":"Usercube-CSV-Transform","description":"Examples","source":"@site/docs/usercube/usercube/integration-guide/executables/references/csv-transform/index.md","sourceDirName":"usercube/integration-guide/executables/references/csv-transform","slug":"/usercube/integration-guide/executables/references/csv-transform/","permalink":"/docs/usercube/usercube/integration-guide/executables/references/csv-transform/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/executables/references/csv-transform/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Usercube-Create-DatabaseViews","permalink":"/docs/usercube/usercube/integration-guide/executables/references/create-databaseviews/"},"next":{"title":"Usercube-Decrypt-File","permalink":"/docs/usercube/usercube/integration-guide/executables/references/decrypt-file/"}}');var t=s(474848),i=s(28453);const c={},d="Usercube-CSV-Transform",o={},l=[{value:"Examples",id:"examples",level:2},{value:"Define a primary key",id:"define-a-primary-key",level:3},{value:"Handle multi-valued columns in a generated file",id:"handle-multi-valued-columns-in-a-generated-file",level:3},{value:"Arguments",id:"arguments",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"usercube-csv-transform",children:"Usercube-CSV-Transform"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"define-a-primary-key",children:"Define a primary key"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the file ",(0,t.jsx)(n.code,{children:"C:/UsercubeContoso/Sources/hr_example.csv"})," with the following headers line:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Login,Company,Email,FirstName,LastName"})}),"\n",(0,t.jsxs)(n.p,{children:["To avoid having too much duplicated information on each line in a CSV file, we need to define a primary key for the file which will allow the pooling of common information. We choose to concatenate the values of the columns ",(0,t.jsx)(n.code,{children:"Login"})," and ",(0,t.jsx)(n.code,{children:"Company "})," with a ",(0,t.jsx)(n.code,{children:"-"})," as separator in an ",(0,t.jsx)(n.code,{children:"Id"})," column, which will be defined as key for our file."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'--input-file C:/UsercubeContoso/Sources/hr_example.csv --columns-concat "Login Company - ID"'}),"--columns-key ID```"]}),"\n",(0,t.jsx)(n.h3,{id:"handle-multi-valued-columns-in-a-generated-file",children:"Handle multi-valued columns in a generated file"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the file ",(0,t.jsx)(n.code,{children:"C:/UsercubeContoso/Sources/hr_example123.csv"})," with the following headers line separated by a ",(0,t.jsx)(n.code,{children:";"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"GroupAzure;Members;GroupSharePoint;Members"})}),"\n",(0,t.jsxs)(n.p,{children:["This file is automatically generated by a script and the suffix (",(0,t.jsx)(n.code,{children:"123"}),"here) is incremented on each generation. Thus, we need to use a regex to avoid changing the command line for each new generated file."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"--input-file C:/UsercubeContoso/Sources/hr_example(.*?).csv --regex --separator ;"})}),"\n",(0,t.jsx)(n.p,{children:"The file contains two headers with the same name, each related to one kind of group. Thus, we need to rename one of these headers."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'--input-file C:/UsercubeContoso/Sources/hr_example(.*?).csv --regex --separator ; --headers-edit-name "Members MembersAzure"'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we will consider that the two Members columns contain all members for each group separated by a ",(0,t.jsx)(n.code,{children:","})," for the first Members column, and by a ",(0,t.jsx)(n.code,{children:"*"})," for the second one. We need to transform these columns in Identity Manager's format for multi-valued attributes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'--input-file C:/UsercubeContoso/Sources/hr_example(.*?).csv --regex --separator ; --headers-edit-name "Members MembersAzure" --columns-multivalued "MembersAzure ," "Members *"'})}),"\n",(0,t.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument Name"}),(0,t.jsx)(n.th,{children:"Details"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--input-path   required"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the CSV file to modify.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Define ",(0,t.jsx)(n.code,{children:"C:/UsercubeContoso/Sources/hr_example.csv"})," as input file:   ",(0,t.jsx)(n.code,{children:"--input-file C:/UsercubeContoso/Sources/hr_example.csv"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--output-path   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the output path, which is the exports' output path by default.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Define ",(0,t.jsx)(n.code,{children:"C:/UsercubeContoso/Test"})," as output folder:   ",(0,t.jsx)(n.code,{children:'--output-path "C:/UsercubeContoso/Test"'}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["--new-name   optional, required ",(0,t.jsx)(n.strong,{children:"if"})," --regex is true"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the new name for the output file.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Define new name ",(0,t.jsx)(n.code,{children:"hr_transformed.csv"}),":   ",(0,t.jsx)(n.code,{children:"--new-name hr_transformed.csv"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--input-file-encoding   default value: UTF-8"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String   ",(0,t.jsx)(n.strong,{children:"Description"})," Encoding of the input file. ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding#see-the-list-of-available-encodings",children:"See the list of available encodings"}),". ",(0,t.jsx)(n.strong,{children:"Example"})," ",(0,t.jsx)(n.code,{children:"--input-file-encoding UTF-16"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--headers-edit-index   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the headers to edit by index, which is particularly useful to rename empty headers. Each member of the list is written like ",(0,t.jsx)(n.code,{children:"index newHeader"}),".   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Add or replace header at index 1 with ",(0,t.jsx)(n.code,{children:"ExampleHeader"})," :    ",(0,t.jsx)(n.code,{children:'--headers-edit-index "1 ExampleHeader"'}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--headers-edit-name   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the headers to rename (first found) with the new name. Each member of the list is written like ",(0,t.jsx)(n.code,{children:"currentHeader newHeader"}),".   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Rename headers ",(0,t.jsx)(n.code,{children:"CompanyId"})," into ",(0,t.jsx)(n.code,{children:"Company"})," and ",(0,t.jsx)(n.code,{children:"int32_1"})," into ",(0,t.jsx)(n.code,{children:"int32"}),":    ",(0,t.jsx)(n.code,{children:'--headers-edit-name "CompanyId Company" "int32_1 int32"'}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--headers-remove-index   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    Integer   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the headers to remove by index. This command can be used to remove the second occurrence of a duplicate header by specifying its index.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Remove header located at index 5:    ",(0,t.jsx)(n.code,{children:"--headers-remove-index 5"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--headers-remove-name   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the headers to remove by name (first found).   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Remove first occurrences of headers ",(0,t.jsx)(n.code,{children:"date1"})," and ",(0,t.jsx)(n.code,{children:"bool1"}),":    ",(0,t.jsx)(n.code,{children:"--headers-remove-name date1 bool1"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--new-headers   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," ",(0,t.jsx)(n.strong,{children:"ONLY"})," for files without headers, specifies the new headers ",(0,t.jsx)(n.strong,{children:"except"})," the ones created by the concatenation of columns.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Defines ",(0,t.jsx)(n.code,{children:"header1"})," and ",(0,t.jsx)(n.code,{children:"header2"})," as headers of the file:    ",(0,t.jsx)(n.code,{children:"--new-headers header1 header2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-concat   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns to concatenate and how. Each member of the list is written like ",(0,t.jsx)(n.code,{children:"column1Header column2Header"}),". If you want to specify characters between the column values, you can write ",(0,t.jsx)(n.code,{children:"column1Header column2Header charactersBetween"}),". This operation creates a new column where it puts the result of the concatenation. This column header is the concatenation of the headers, but you can change it by writing the member like ",(0,t.jsx)(n.code,{children:"column1Header column2Header charactersBetween newColumnHeader"}),".   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Concatenate columns:   - ",(0,t.jsx)(n.code,{children:"Company"})," and ",(0,t.jsx)(n.code,{children:"Employee"})," with a ",(0,t.jsx)(n.code,{children:"-"})," between them. ",(0,t.jsx)(n.code,{children:"ID"})," will be the new column header. - ",(0,t.jsx)(n.code,{children:"guid1"})," and ",(0,t.jsx)(n.code,{children:"bytes1"})," with ",(0,t.jsx)(n.code,{children:"_"})," between them. - ",(0,t.jsx)(n.code,{children:"int32_2"})," and ",(0,t.jsx)(n.code,{children:"int64_2"})," with nothing in between. ",(0,t.jsx)(n.code,{children:'--columns-concat "Company Employee - ID" "guid1 bytes1 _" "int32_2 int64_2"'})," ."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-multivalued   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with multi-valued values not splittable with breaks. Each member of the list is written like ",(0,t.jsx)(n.code,{children:"columnHeader separator"}),".   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Handle columns ",(0,t.jsx)(n.code,{children:"multivalued1"}),", using separator ",(0,t.jsx)(n.code,{children:","}),", and ",(0,t.jsx)(n.code,{children:"multivalued2"}),", using separator ",(0,t.jsx)(n.code,{children:"*"}),":    ",(0,t.jsx)(n.code,{children:'--columns-multivalued "multivalued1 ," "multivalued2 *"'}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-date   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with date values, and their date format, to format them into Identity Manager's format. Each member of the list is written like ",(0,t.jsx)(n.code,{children:"columnHeader dateFormat"}),".   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format date columns ",(0,t.jsx)(n.code,{children:"date1"})," and ",(0,t.jsx)(n.code,{children:"date2"}),", using the format ",(0,t.jsx)(n.code,{children:"yyyyddMMHHmmss"}),":   ",(0,t.jsx)(n.code,{children:'--columns-date "date1 yyyyddMMHHmmss" "date2 yyyyddMMHHmmss"'}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-bool   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with Boolean values to convert them into Identity Manager's format.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format Boolean columns ",(0,t.jsx)(n.code,{children:"bool1"})," and ",(0,t.jsx)(n.code,{children:"bool2"}),":    ",(0,t.jsx)(n.code,{children:"--columns-bool bool1 bool2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-int32   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with Int32 values to convert them into Identity Manager's format.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format Int32 columns ",(0,t.jsx)(n.code,{children:"int32_1"})," and ",(0,t.jsx)(n.code,{children:"int32_2 "}),":    ",(0,t.jsx)(n.code,{children:"--columns-int32 int32_1 int32_2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-int64   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with Int64 values to convert them into Identity Manager's format.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format Int64 columns ",(0,t.jsx)(n.code,{children:"int64_1"}),"and ",(0,t.jsx)(n.code,{children:"int64_2"}),":    ",(0,t.jsx)(n.code,{children:"--columns-int64 int64_1 int64_2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-guid   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with Guid values to convert them into Identity Manager's format.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format Guid columns ",(0,t.jsx)(n.code,{children:"guid1"}),"and ",(0,t.jsx)(n.code,{children:"guid2"}),":   ",(0,t.jsx)(n.code,{children:"--columns-guid guid1 guid2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-bytes   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns with Bytes values to convert them into Identity Manager's format.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Format Bytes columns ",(0,t.jsx)(n.code,{children:"bytes1"})," and ",(0,t.jsx)(n.code,{children:"bytes2"}),":     ",(0,t.jsx)(n.code,{children:"--columns-bytes bytes1 bytes2"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--columns-key   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String List   ",(0,t.jsx)(n.strong,{children:"Description"})," Specifies the columns key to delete duplicates (the first line found is the one we keep). A column created by this tool can be specified as a key column through this argument, like the columns created by the ",(0,t.jsx)(n.code,{children:"--columns-concat"})," for example.   ",(0,t.jsx)(n.strong,{children:"Example"}),"   Define columns ",(0,t.jsx)(n.code,{children:"RawId"})," and ",(0,t.jsx)(n.code,{children:"ID"})," as keys:   ",(0,t.jsx)(n.code,{children:"--columns-key RawId ID"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"---"}),(0,t.jsx)(n.td,{children:"---"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--regex   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    No Value   ",(0,t.jsx)(n.strong,{children:"Description"})," The file name is a regex so we find the last generated corresponding file."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"--separator   optional"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Type"}),"    String   ",(0,t.jsx)(n.strong,{children:"Description"})," Defines the separator if different than ",(0,t.jsx)(n.code,{children:","}),"."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);