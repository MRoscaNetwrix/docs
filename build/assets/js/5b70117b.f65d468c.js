"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[499446],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(296540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},583659:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"groupid/portal/synchronize/script/dtmscript","title":"Script","description":"Synchronize scripts are written in Visual Basic .NET. A script is run after having established a current source row (\u201dobject\u201d). The script determines a single value--the \u201dresult\u201d value--and assigns that value to the keyword DTM.Result.","source":"@site/docs/groupid/groupid/portal/synchronize/script/dtmscript.md","sourceDirName":"groupid/portal/synchronize/script","slug":"/groupid/portal/synchronize/script/dtmscript","permalink":"/docs/groupid/groupid/portal/synchronize/script/dtmscript","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/groupid/groupid/portal/synchronize/script/dtmscript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"groupIdSidebar","previous":{"title":"Synchronize Providers","permalink":"/docs/groupid/groupid/portal/synchronize/provider"},"next":{"title":"Sample Container Scripts","permalink":"/docs/groupid/groupid/portal/synchronize/script/samplecontainerscript"}}');var i=s(474848),r=s(28453);const o={},a="Script",c={},l=[{value:"Examples and Language Overview",id:"examples-and-language-overview",level:2},{value:"DTM keywords",id:"dtm-keywords",level:2},{value:"Context",id:"context",level:2},{value:"Scripting restrictions enforced by Synchronize",id:"scripting-restrictions-enforced-by-synchronize",level:2},{value:"Visual Basic options set by Synchronize",id:"visual-basic-options-set-by-synchronize",level:2},{value:".Net assembly references",id:"net-assembly-references",level:2},{value:".Net Namespaces",id:"net-namespaces",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"script",children:"Script"})}),"\n",(0,i.jsxs)(n.p,{children:["Synchronize scripts are written in Visual Basic .NET. A script is run after having established a current source row (\u201dobject\u201d). The script determines a single value--the \u201dresult\u201d value--and assigns that value to the keyword ",(0,i.jsx)(n.strong,{children:"DTM.Result"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The type of script determines the nature of the script result:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transform scripts:"})," the script result is the value of a destination field."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Container scripts:"})," the script result is the distinguished name of a parent container."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples-and-language-overview",children:"Examples and Language Overview"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For examples of transform scripts, see the ",(0,i.jsx)(n.a,{href:"/docs/groupid/groupid/portal/synchronize/script/sampletransformscript",children:"Sample Transform Scripts"})," topic"]}),"\n",(0,i.jsxs)(n.li,{children:["For examples of container scripts, see the ",(0,i.jsx)(n.a,{href:"/docs/groupid/groupid/portal/synchronize/script/samplecontainerscript",children:"Sample Container Scripts"})," topic"]}),"\n",(0,i.jsxs)(n.li,{children:["For general information, see ",(0,i.jsx)(n.a,{href:"/docs/groupid/groupid/portal/synchronize/script/visualbasicnetbasic",children:"Visual Basic .NET for Directory Manager (formerly GroupID)"})," topic"]}),"\n",(0,i.jsx)(n.li,{children:"For general information, see Python for GroupID topic"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dtm-keywords",children:"DTM keywords"}),"\n",(0,i.jsx)(n.p,{children:"DTM keywords give you access to the data being processed."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DTM.Source(",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"fieldname"})}),")"]}),"\n",(0,i.jsx)(n.p,{children:'This function has a single string argument: field name. DTM.Source returns the value of the specified field (or "attribute") for the current row ("object")\nin the source data.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"DTM.Result"}),"\n",(0,i.jsx)(n.p,{children:"This is a write-only property. This script must assign a value to DTM.Result. This type of script determines what the value signifies."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Transform script \u2013 assign to DTM.Result the desired value of the transform\u2019s destination field."}),"\n",(0,i.jsx)(n.li,{children:"Container script \u2013 assign to DTM.Result the distinguished name of the new object\u2019s container."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'In any script, each branch of execution must assign a value to DTM.Result. Failure to assign a value to DTM.Result causes a runtime error, and the destination row ("object") is not updated or\ncreated . The job still runs to completion.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DTM.ExpandVariables(",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"<text>"})}),")"]}),"\n",(0,i.jsx)(n.p,{children:'This function has a single string argument: text. It returns the valueof the specified text as a string after replacing each environment variable embedded in the text\nwith its string equivalent. Environment variables are surrounded by "%" characters, as in "%now%" and "%SystemDrive%".'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"DTM.CancelRow()"}),"\n",(0,i.jsx)(n.p,{children:'This subroutine contains no arguments. The current destination row ("object") is not updated or created. DTM.CancelRow provides a way to bypass certain objects based on their attributes. (In general, using a filter\nquery for this purpose gives better performance.)'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DTM.AddToContext(",(0,i.jsx)(n.code,{children:"<__Key__>"}),",",(0,i.jsx)(n.code,{children:"<__Value__>"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"This function has two arguments: Key and Value. When data is to be shared across segments of code in different editors\nsupported by the Synchronize job wizard, it needs to be placed in the Context. This practice prevents errors and exceptions."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DTM.Context(",(0,i.jsx)(n.code,{children:"<__Key__>"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"This property has a single argument: Key. An object that has been added to the Context is retrieved by passing its key (identity) to this property."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"The Context plays a central role in the Synchronize job model. In a Synchronize job, assemblies for Synchronize PowerTools and other third-party libraries can only be referenced in the Global Script Editor, therefore, manipulating objects of these\nlibraries in other code segments in a job is only possible by adding them to the Context."}),"\n",(0,i.jsx)(n.p,{children:"The Context is an implementation of the .NET Hashtable collection, which is an in-memory data structure that stores and retrieves objects using key/value pairs. The DTM object in the Synchronize job model provides two members, AddToContext and Context,\nfor adding and retrieving objects from the Context. To learn more about these two members, please see the previous section on DTM keywords."}),"\n",(0,i.jsx)(n.p,{children:"Although a Context makes it possible to share objects added to it across different code segments of a Synchronize job, it is not possible to test code for each segment individually without actually running the job. For this reason, you may encounter\none of the following situations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You receive an exception when trying to compile the code in the Script Editor, stating that the object reference is not found."}),"\n",(0,i.jsx)(n.li,{children:"Testing your script using the built-in Script Tester with random data does not provide the expected results, even though the code handles the exception and checks are placed for null object references."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"scripting-restrictions-enforced-by-synchronize",children:"Scripting restrictions enforced by Synchronize"}),"\n",(0,i.jsx)(n.p,{children:"Behind the scenes, Synchronize inserts each script into the body of a subroutine before compiling. Therefore, any Visual Basic .NET constructs that are only valid outside of a subroutine/function will fail to compile and will be disallowed."}),"\n",(0,i.jsx)(n.p,{children:"These restrictions apply to creating a Synchronize script:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Subroutines, functions, classes, modules, and namespaces are not allowed."}),"\n",(0,i.jsx)(n.li,{children:"Module-level statements, such as Import or Option statements, are not permitted."}),"\n",(0,i.jsx)(n.li,{children:"Shared (that is, static, and global) variables are not supported."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visual-basic-options-set-by-synchronize",children:"Visual Basic options set by Synchronize"}),"\n",(0,i.jsx)(n.p,{children:"Synchronize establishes the following Option statements which apply to all scripts and cannot be overridden:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Option Explicit On \u2013 all variables must be declared before use via a Dim statement. With Visual Basic .Net, it is possible to both declare and assign variables at their first use, as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Dim MyVariable = "Hello"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Dim MyObject = New Object()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Option Strict Off \u2013 data types do not need to be declared for each variable. Conversions between types, when possible, are performed implicitly. (By declaring data types, unnecessary conversions can be avoided, and performance improved)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"net-assembly-references",children:".Net assembly references"}),"\n",(0,i.jsx)(n.p,{children:"Synchronize establishes certain system assembly references before compiling your scripts. These references apply to all scripts and cannot be overridden."}),"\n",(0,i.jsx)(n.p,{children:"These references are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MsCorLib.dll"}),"\n",(0,i.jsx)(n.li,{children:"System.dll"}),"\n",(0,i.jsx)(n.li,{children:"System.Data.dll"}),"\n",(0,i.jsx)(n.li,{children:"System.Xml.dll"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"System.DirectoryServices, in particular, is \u201doff-limits\u201d to your scripts so as to prevent direct access to Active Directory and other LDAP identity providers. This restriction is desirable, as it prevents your script from acting in conflict with Synchronize,\nwhich, after all, has ultimate responsibility for updating these providers."}),"\n",(0,i.jsx)(n.h2,{id:"net-namespaces",children:".Net Namespaces"}),"\n",(0,i.jsx)(n.p,{children:"Synchronize imports certain namespaces when compiling your scripts. These imports apply to all scripts and cannot be overridden."}),"\n",(0,i.jsx)(n.p,{children:"These imports are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Imports System"}),"\n",(0,i.jsx)(n.li,{children:"Imports System.Text"}),"\n",(0,i.jsx)(n.li,{children:"Imports System.Text.RegularExpressions"}),"\n",(0,i.jsx)(n.li,{children:"Imports System.IO"}),"\n",(0,i.jsx)(n.li,{children:"Imports System.Math"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:".Net namespaces other than those listed here can still be accessed by specifying the fully-qualified namespace. For example, a DataSet (which belongs to the System.Data namespace) can be read from a file as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\xa0Dim ds = New System.Data.DataSet()<br xmlns="http://www.w3.org/1999/xhtml" /> ds.ReadXml("C:\\Temp\\MyFile.xml")  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);