"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[598819],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(296540);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},144746:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/index","title":"Send Notifications Task","description":"Task that sends all the custom notifications defined by the [","source":"@site/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask","slug":"/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendnotificationstask/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSaasSidebar","previous":{"title":"Send Access Certification Notification Task","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendaccesscertificationnotificationtask/"},"next":{"title":"Send Role Model Notifications Task","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/server/sendrolemodelnotificationstask/"}}');var s=i(474848),o=i(28453);const r={},a="Send Notifications Task",c={},d=[{value:"Examples",id:"examples",level:2},{value:"Properties",id:"properties",level:2},{value:"Child Element: TaskEntityType",id:"child-element-taskentitytype",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"send-notifications-task",children:"Send Notifications Task"})}),"\n",(0,s.jsxs)(t.p,{children:["Task that sends all the custom notifications defined by the ",(0,s.jsx)(t.a,{href:"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/notifications/notification/",children:"\nNotification\n"})," XML tag."]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(t.p,{children:["The following example, included in a job potentially scheduled periodically, will send all custom notifications defined via ",(0,s.jsx)(t.code,{children:"Notification"})," such as the example below. The task will send the notifications concerning the ",(0,s.jsx)(t.code,{children:"Directory_User"})," entity type."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'\n<SendNotificationsTask Identifier="SendNotifications" DisplayName_L1="Send notifications">\t<TaskEntityType EntityType="Directory_User" /></SendNotificationsTask>\n\nKnowing that we have for example:\n<Notification Identifier="New_Directory_User" OwnerEntityType="Directory_User" RazorTemplate="./Template/Notification.cshtml" CssTemplate="./Template/Notification.css" TitleExpression="C#:user:return &quot;New Employee&quot;;" QueryFilterExpression="C#:user:return $&quot;join MainRecord r where r.ContractStartDate > \\&quot;{DateTime.UtcNow.ToString(&quot;yyyy-MM-ddTHH:mm:ssZ&quot;)}\\&quot;&quot;;" RecipientMailBinding="Directory_User:MainRecord.Organization.Manager.MainRecord.Email" ReminderInterval="10080" />\n\n'})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Details"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DisplayName_L1   required"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:"Type"}),"    String   ",(0,s.jsx)(t.strong,{children:"Description"}),"   Display name of the task in language 1 (up to 16)."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"BatchSize   default value: 0"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:"Type"}),"    Int32   ",(0,s.jsx)(t.strong,{children:"Description"}),"   Block size for batch calculation."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Identifier   optional"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:"Type"}),"    String   ",(0,s.jsx)(t.strong,{children:"Description"}),"   Unique identifier of the task."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"child-element-taskentitytype",children:"Child Element: TaskEntityType"}),"\n",(0,s.jsx)(t.p,{children:"A task entity type defines the entity type on which the task is applied."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Details"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"EntityType   required"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:"Type"}),"    Int64   ",(0,s.jsx)(t.strong,{children:"Description"}),"   Identifier of the entity type that the task is to be applied on."]})]})})]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);