"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[898570],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(296540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},521023:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script/index","title":"Write a PowerShell Script for Provisioning","description":"This guide shows how to write a PowerShell script used by the [","source":"@site/docs/usercube_saas/usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script/index.md","sourceDirName":"usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script","slug":"/usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script/","permalink":"/docs/usercube_saas/usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube_saas/usercube/integration-guide/connectors/how-tos/write-fulfill-powershell-script/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSaasSidebar","previous":{"title":"Set up SharePoint\'s Export and Synchronization","permalink":"/docs/usercube_saas/usercube/integration-guide/connectors/how-tos/sharepoint-export/"},"next":{"title":"Write a Robot Framework Script","permalink":"/docs/usercube_saas/usercube/integration-guide/connectors/how-tos/write-fulfill-robotframework-script/"}}');var i=r(474848),s=r(28453);const o={},a="Write a PowerShell Script for Provisioning",d={},l=[{value:"Structure of a PowerShell Script",id:"structure-of-a-powershell-script",level:2},{value:"Define the common part of every script",id:"define-the-common-part-of-every-script",level:3},{value:"Define the specific function",id:"define-the-specific-function",level:3},{value:"Define the header",id:"define-the-header",level:4},{value:"Define mandatory parameters",id:"define-mandatory-parameters",level:4},{value:"Define order processing",id:"define-order-processing",level:4},{value:"Write the main code of the script",id:"write-the-main-code-of-the-script",level:3},{value:"Synthesis",id:"synthesis",level:2},{value:"Skeleton",id:"skeleton",level:3},{value:"Full script",id:"full-script",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"write-a-powershell-script-for-provisioning",children:"Write a PowerShell Script for Provisioning"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide shows how to write a PowerShell script used by the ",(0,i.jsx)(n.a,{href:"/docs/usercube_saas/usercube/integration-guide/connectors/references-connectors/powershellprov/",children:"\nPowerShellProv\n"})," connector."]}),"\n",(0,i.jsx)(n.h2,{id:"structure-of-a-powershell-script",children:"Structure of a PowerShell Script"}),"\n",(0,i.jsx)(n.p,{children:"The goal of the script is to append, for each provisioning order, a line in a CSV file."}),"\n",(0,i.jsxs)(n.p,{children:["Let's consider the following ",(0,i.jsx)(n.code,{children:"ResourceType"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n...\n<ResourceType Identifier="PowerShellCsv_User_NominativeUser" DisplayName_L1="PowerShell CSV User (nominative)" DisplayName_L2="Utilisateur PowerShell CSV (nominatif)" Policy="Default" TargetEntityType="PowerShellCsv_User" Category="PowerShellCsv" SourceEntityType="Directory_User" RemoveOrphans="true" AllowAdd="true" AllowRemove="true">  <ScalarRule Property="identifier" Binding="EmployeeId"/>  <ScalarRule Property="firstName" Binding="FirstName"/>  <ScalarRule Property="lastName" Binding="LastName"/></ResourceType>...\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"The end of the CSV file must look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\ncommand;identifier;firstName;lastName\n...\ninsert;007;James;Bond\n...\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"define-the-common-part-of-every-script",children:"Define the common part of every script"}),"\n",(0,i.jsx)(n.p,{children:"The goal of the common part is to get all required variables needed by the script."}),"\n",(0,i.jsx)(n.p,{children:"Two parameters are required at the top of the script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\nparam(\n  [Parameter(Mandatory = $true)][string]$resultsFilePath,\n  [Parameter(Mandatory = $true)][string]$ordersPath\n)\n\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resultsFilePath"})," is the agent-side path of the result file containing the summary of the executed and errored orders."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ordersPath"})," is the agent-side folder path containing the JSON provisioning orders."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is important for these settings to be defined at the top of the script and keep these names because they are filled by the ",(0,i.jsx)(n.code,{children:"Fulfill-PowerShell"})," connector."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Fulfill-CSV.ps1"})," script must be placed in the script folder of Identity Manager\xa0containing the ",(0,i.jsx)(n.code,{children:"Environment.ps1"})," script. Thanks to this, environment variables (such as ",(0,i.jsx)(n.code,{children:"$runtimePath"}),") are loaded and can be used in the script:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n. (Join-Path -Path $PSScriptRoot -ChildPath "Environment.ps1")\n. (Join-Path -Path $runtimePath -ChildPath "Usercube-Visit-Orders.ps1")\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"define-the-specific-function",children:"Define the specific function"}),"\n",(0,i.jsx)(n.p,{children:"A function which is called for each provisioning order must be defined."}),"\n",(0,i.jsx)(n.h4,{id:"define-the-header",children:"Define the header"}),"\n",(0,i.jsx)(n.p,{children:"The header is always the same. Only the name of the function can change:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\nfunction Fulfill-CSV {\n  param ([parameter(Mandatory = $true)] $order)\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The previous parameter ",(0,i.jsx)(n.code,{children:"$order"})," is an object corresponding to the following provisioning order (JSON):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n{\n    "ProvisioningOrdersList": [\n        {\n            "AssignedResourceTypeId": "3930001",\n            "ChangeType": "Added",\n            "WorkflowInstanceId": "81",\n            "Owner": {\n                "Id": "21511",\n                "InternalDisplayName": "007 - Bond James",\n                "Identifier": "007",\n                "EmployeeId": "007",\n                "PhotoTag": -3065,\n                "MainFirstName": "James",\n                "MainLastName": "Bond",\n                ...\n            },\n            "ResourceType": {\n                "Id": "-41",\n                "SourceEntityType": {\n                    "Id": "51",\n                    "Identifier": "Directory_User"\n                },\n                "TargetEntityType": {\n                    "Id": "70",\n                    "Identifier": "PowerShellCsv_User"\n                },\n                "Identifier": "PowerShellCsv_User_NominativeUser"\n            },\n            "Changes": {\n                "identifier": "007",\n                "firstName": "James",\n                "lastName": "Bond"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"There can be more sections and attributes."}),"\n",(0,i.jsx)(n.h4,{id:"define-mandatory-parameters",children:"Define mandatory parameters"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ChangeType"})," parameter (",(0,i.jsx)(n.code,{children:"Added"}),", ",(0,i.jsx)(n.code,{children:"Deleted"})," or ",(0,i.jsx)(n.code,{children:"Modified"}),") is always mandatory and must be checked."]}),"\n",(0,i.jsx)(n.p,{children:"Depending on the function requirements, other parameters should be checked. For example, the function below always needs an identifier to work properly, therefore you should check its presence."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n  $changeType = $order.ChangeType\n  # if the change type is not recognized, we throw an error\n  if ($changeType -ne 'Added' -and $changeType -ne 'Deleted' -and $changeType -ne 'Modified') {\n    $artId = $order.AssignedResourceTypeId\n    throw \"Order ChangeType: $changeType not recognized in AssignedResourceTypeId: '$artId'\"\n  }\n\n  # if the section is Changes, we want to create/update the identifier\n  $identifier = $order.Changes.identifier\n  if(!$identifier){\n    # if the section is Resources, we want to keep the same identifier\n    $identifier = $order.Resource.identifier\n    if(!$identifier){\n      throw \"identifier is the primary key and must not be null.\"\n    }\n  }\n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"define-order-processing",children:"Define order processing"}),"\n",(0,i.jsx)(n.p,{children:"This is the last part of the function:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parameters from the provisioning order are stored in variables."}),"\n",(0,i.jsxs)(n.li,{children:["A specific treatment is applied if ",(0,i.jsx)(n.code,{children:"ChangeType"})," is ",(0,i.jsx)(n.code,{children:"Added"}),", ",(0,i.jsx)(n.code,{children:"Deleted"})," or ",(0,i.jsx)(n.code,{children:"Modified"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n  # firstName and lastName are the two other properties of the ResourceType\n  $firstName = $order.Changes.firstName\n  $lastName = $order.Changes.lastName\n\n  # change type defines what is written in the \'command\' column\n  if ($changeType -eq \'Added\') {\n    $command = "Insert"\n  }\n  elseif ($changeType -eq \'Deleted\') {\n    $command = "Delete"\n  }\n  elseif ($changeType -eq \'Modified\') {\n    $command = "Update"\n  }\n\n  # CSV columns are command, identifier, firstName and lastName\n  $script:powershellResults += New-Object -TypeName psobject -Property @{Command = "$command"; identifier = "$identifier"; firstName = "$firstName"; lastName = "$lastName" }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Define how to send logs to Identity Manager"}),"\n",(0,i.jsx)(n.p,{children:"The three methods to log in Identity Manager\xa0are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write-Host"}),": writes Information in the log."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Throw"}),": raises an exception (which stops the script), and writes the Error in the log (the provisioning order will be errored too)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write-Error"}),": writes Error in the log (the provisioning order will be errored too). It is not recommended because the script continues its execution."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now that the function has been defined, the main code of the script can be written."}),"\n",(0,i.jsx)(n.h3,{id:"write-the-main-code-of-the-script",children:"Write the main code of the script"}),"\n",(0,i.jsx)(n.p,{children:"Read the options parameter from the standard input"}),"\n",(0,i.jsx)(n.p,{children:"The options parameter isn't mandatory in the JSON file. If it isn't provided, don't perform this step."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n# Just to show how to read the options in the script\n$options = [System.Console]::ReadLine()\n$options = ConvertFrom-Json $options\n$options.Message # -> Hello\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Rest of the main script"}),"\n",(0,i.jsxs)(n.p,{children:["In general, this part contains the code to connect to the external system and executes the ",(0,i.jsx)(n.code,{children:"Usercube-Visit-Orders"})," script."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n# The goal of the script is to write the users in the following CSV file\n$powershellResultFilePath = Join-Path -Path "$demoPath" -ChildPath "Temp/ExportOutput/powershellcsv_users.csv"\n\n# powershellResults has a larger scope and is used in the last line of the Fulfill-CSV function\n$powershellResults = @()\n\n# Usercube-Visit-Orders is provided by Usercube, it must not be modified\n# It loops on the provisioning orders and calls Fulfill-CSV on each of them\nUsercube-Visit-Orders $resultsFilePath $ordersPath Fulfill-CSV\n\n# We write the results in $powershellResultFilePath\nif ($powershellResults.Length -gt 0){\n  $powershellResults | ConvertTo-Csv -Delimiter ";" -NoTypeInformation | & (Join-Path -Path "$runtimePath" -ChildPath "Usercube-Encrypt-File.exe") -o $powershellResultFilePath\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Never modify ",(0,i.jsx)(n.code,{children:"Usercube-Visit-Orders.ps1"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"synthesis",children:"Synthesis"}),"\n",(0,i.jsx)(n.h3,{id:"skeleton",children:"Skeleton"}),"\n",(0,i.jsx)(n.p,{children:"To sum up the previous part, the script can be written as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n# Common part\n\n# Specific function\n  # Header of the function\n  # Check mandatory parameters\n  # Order processing (treatment for Added, Deleted or Modified)\n\n# Main script\n  # Read standard input (Optional)\n  # Rest of the main script (Connection, Usercube-Visit-Order...)\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"full-script",children:"Full script"}),"\n",(0,i.jsx)(n.p,{children:"The full script is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n# Common part\n\nparam(\n  [Parameter(Mandatory = $true)][string]$resultsFilePath,\n  [Parameter(Mandatory = $true)][string]$ordersPath\n)\n\n. (Join-Path -Path $PSScriptRoot -ChildPath "Environment.ps1")\n. (Join-Path -Path $runtimePath -ChildPath "Usercube-Visit-Orders.ps1")\n\n# Specific function\n\nfunction Fulfill-CSV {\n  param ([parameter(Mandatory = $true)] $order)\n\n  $changeType = $order.ChangeType\n  # if the change type is not recognized, we throw an error\n  if ($changeType -ne \'Added\' -and $changeType -ne \'Deleted\' -and $changeType -ne \'Modified\') {\n    $artId = $order.AssignedResourceTypeId\n    throw "Order ChangeType: $changeType not recognized in AssignedResourceTypeId: \'$artId\'"\n  }\n\n  # if the section is Changes, we want to create/update the identifier\n  $identifier = $order.Changes.identifier\n  if(!$identifier){\n    # if the section is Resources, we want to keep the same identifier\n    $identifier = $order.Resource.identifier\n    if(!$identifier){\n      throw "identifier is the primary key and must not be null."\n    }\n  }\n\n  # firstName and lastName are the two other properties of the ResourceType\n  $firstName = $order.Changes.firstName\n  $lastName = $order.Changes.lastName\n\n  # change type defines what is written in the \'command\' column\n  if ($changeType -eq \'Added\') {\n    $command = "Insert"\n  }\n  elseif ($changeType -eq \'Deleted\') {\n    $command = "Delete"\n  }\n  elseif ($changeType -eq \'Modified\') {\n    $command = "Update"\n  }\n\n  # CSV columns are command, identifier, firstName and lastName\n  $script:powershellResults += New-Object -TypeName psobject -Property @{Command = "$command"; identifier = "$identifier"; firstName = "$firstName"; lastName = "$lastName" }\n}\n\n# Main script\n\n# Just to show how to read the options in the script\n$options = [System.Console]::ReadLine()\n$options = ConvertFrom-Json $options\n$options.Message # -> Hello\n\n# The goal of the script is to write the users in the following CSV file\n$powershellResultFilePath = Join-Path -Path "$demoPath" -ChildPath "Temp/ExportOutput/powershellcsv_users.csv"\n\n# powershellResults has a larger scope and is used in the last line of the Fulfill-CSV function\n$powershellResults = @()\n\n# Usercube-Visit-Orders is provided by Usercube, it must not be modified\n# It loops on the provisioning orders and calls Fulfill-CSV on each of them\nUsercube-Visit-Orders $resultsFilePath $ordersPath Fulfill-CSV\n\n# We write the results in $powershellResultFilePath\nif ($powershellResults.Length -gt 0){\n  $powershellResults | ConvertTo-Csv -Delimiter ";" -NoTypeInformation | & (Join-Path -Path "$runtimePath" -ChildPath "Usercube-Encrypt-File.exe") -o $powershellResultFilePath\n}\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);