"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[263141],{28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var i=o(296540);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},163621:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/index","title":"Jobs","description":"- Clean Database Job","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs","slug":"/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Workflow Performer Notification","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/entitytypes/workflows/workflowperformernotification/"},"next":{"title":"Clean Database Job","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/cleandatabasejob/"}}');var t=o(474848),r=o(28453);const s={},c="Jobs",a={},l=[];function u(e){const n={a:"a",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"jobs",children:"Jobs"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/cleandatabasejob/",children:"Clean Database Job"})}),"\n",(0,t.jsx)(n.p,{children:"Creates the job to clean old tasks and jobs instances with state InProgress."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createaccesscertificationjob/",children:"Create Access Certification Job"})}),"\n",(0,t.jsx)(n.p,{children:"Creates the AccessCertification Job."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createagentsynchrocomplete/",children:"Create Agent Synchro Complete"})}),"\n",(0,t.jsx)(n.p,{children:"Creates for the given agent the synchronization job of all connectors present in the agent in Complete mode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createagentsynchroincremental/",children:"Create Agent Synchro Incremental"})}),"\n",(0,t.jsx)(n.p,{children:"Creates for the given agent the synchronization job of all connectors present in the agent in incremental mode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createconnectorsjobs/",children:"\nCreate Connectors Jobs\n"})}),"\n",(0,t.jsx)(n.p,{children:"Creates all jobs by connector to launched task in the connector page."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createconnectorsynchrocomplete/",children:"Create Connector Synchro Complete"})}),"\n",(0,t.jsx)(n.p,{children:"Creates for the given connector the synchronization in complete mode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createconnectorsynchroincremental/",children:"Create Connector Synchro Incremental"})}),"\n",(0,t.jsx)(n.p,{children:"Creates for the given connector the synchronization job in incremental mode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/jobs/createinitializationjob/",children:"Create Initialization Job"})}),"\n",(0,t.jsx)(n.p,{children:"Creates the Initialization Job for the given agent."}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);