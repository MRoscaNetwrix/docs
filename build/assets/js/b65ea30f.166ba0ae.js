"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[379315],{25369:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"policypak/leastprivilege/scopefilters/enhancedsecurerun","title":"Scenario 1: Enhanced SecureRun / Prevent Untrusted Executables and Scripts from Running Even by LOCAL SYSTEM","description":"NOTE:  For an overview of this scenario, see the SecureRun to block User AND System executables video demo.","source":"@site/docs/policypak/policypak/leastprivilege/scopefilters/enhancedsecurerun.md","sourceDirName":"policypak/leastprivilege/scopefilters","slug":"/policypak/leastprivilege/scopefilters/enhancedsecurerun","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/enhancedsecurerun","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/scopefilters/enhancedsecurerun.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"Scenario 4: Elevating a Service Account","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/elevateserviceaccount"},"next":{"title":"Understanding Process Scoping & Filters","permalink":"/docs/policypak/policypak/leastprivilege/scopefilters/overview"}}');var r=s(474848),a=s(28453);const c={},i="Scenario 1: Enhanced SecureRun / Prevent Untrusted Executables and Scripts from Running Even by LOCAL SYSTEM",o={},l=[];function u(e){const t={a:"a",h1:"h1",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"scenario-1-enhanced-securerun--prevent-untrusted-executables-and-scripts-from-running-even-by-local-system",children:"Scenario 1: Enhanced SecureRun / Prevent Untrusted Executables and Scripts from Running Even by LOCAL SYSTEM"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE:"}),"  For an overview of this scenario, see the ",(0,r.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/bestpractices/securerun/usersystemexecutables",children:"SecureRun to block User AND System executables"})," video demo."]}),"\n",(0,r.jsx)(t.p,{children:"When you apply SecureRun on the user or computer side, you\u2019re saying \u201cBlock all untrusted executables started by users.\u201d This doesn\u2019t (by default) block the attack vector of the System performing the attack. You can see the example below where the Standard User is blocked from an executable attempt, but System is still allowed."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"A screenshot of a computer Description automatically generated",src:s(774980).A+"",width:"1881",height:"1281"})}),"\n",(0,r.jsx)(t.p,{children:"However, you can switch SecureRun on the computer side to now say \u201cBlock all untrusted executables started by users or LOCAL SYSTEM.\u201d You would do this on the Computer side, and specify User and System Processes."}),"\n",(0,r.jsx)(t.p,{children:"![A screenshot of a computer"}),"\n",(0,r.jsx)(t.p,{children:"Description automatically generated](/img/product_docs/policypak/policypak/leastprivilege/scopefilters/scenario_1_enhanced_securerun_1.webp)"}),"\n",(0,r.jsx)(t.p,{children:"The result is that both User and System attempts to run un-trusted executables will be prevented."}),"\n",(0,r.jsx)(t.p,{children:"When could this occur?"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"If a normal (user-level) process exploits a security vulnerability to escalate his own privileges and run some arbitrary code with higher privileges (like LOCAL SYSTEM in this case)."}),"\n",(0,r.jsx)(t.li,{children:"If malware launched software on a machine that runs as Local System and existed at c:\\anything\\Program.exe (like PSEXEC, other ransomware, etc.). In this case it would be owned by the user (who is not on the SecureRun list). However, if the malware executed the c:\\anything\\Program.exe as SYSTEM, this attack would be prevented, because the owner of the c:\\anything\\Program.exe is the User (as the attacker) but would NOT on the SecureRun list (even though the process is being run AS SYSTEM.)"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This would strengthen security if malware ended up using an elevated process to attempt to perform its work as LOCAL SYSTEM and tries to run an un-trusted file. Therefore, when the application (.EXE) or script, etc. was attempted to fire off, the attack will fail because the user isn\u2019t on the SecureRun trusted list."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var n=s(296540);const r={},a=n.createContext(r);function c(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(a.Provider,{value:t},e.children)}},774980:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/scenario_1_enhanced_securerun-0af26d2dbf7e8bf3133b823e902a53be.webp"}}]);