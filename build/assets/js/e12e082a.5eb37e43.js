"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[637201],{28453:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>c});var n=s(296540);const a={},t=n.createContext(a);function o(e){const i=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(t.Provider,{value:i},e.children)}},95266:(e,i,s)=>{s.d(i,{A:()=>n});const n=s.p+"assets/images/984_1_image-20230725214430-5_950x637-5a7ba1f54193bf710b64108d11aaa959.webp"},457962:(e,i,s)=>{s.d(i,{A:()=>n});const n=s.p+"assets/images/984_3_image-20230725214430-7_950x691-240785f57a8a7d05887d7a1566e60ac9.webp"},575223:(e,i,s)=>{s.d(i,{A:()=>n});const n=s.p+"assets/images/984_2_image-20230725214430-6_950x580-7cee555029e0aaeca78fb20fc815c149.webp"},818554:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"policypak/device/usbdrive","title":"Why can MSIs be installed from a USB drive when the only access granted to users is READ access","description":"Problem","source":"@site/docs/policypak/policypak/device/usbdrive.md","sourceDirName":"policypak/device","slug":"/policypak/device/usbdrive","permalink":"/docs/policypak/policypak/device/usbdrive","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/device/usbdrive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"How to add Devices when serial numbers contain extra characters in the device instance path","permalink":"/docs/policypak/policypak/device/serialnumber"},"next":{"title":"Editions, Solutions, Paks, and Policies","permalink":"/docs/policypak/policypak/editions/overview"}}');var a=s(474848),t=s(28453);const o={},c="Why can MSIs be installed from a USB drive when the only access granted to users is READ access",r={},l=[{value:"Problem",id:"problem",level:2},{value:"Cause",id:"cause",level:2},{value:"Possible Resolutions",id:"possible-resolutions",level:2}];function d(e){const i={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"why-can-msis-be-installed-from-a-usb-drive-when-the-only-access-granted-to-users-is-read-access",children:"Why can MSIs be installed from a USB drive when the only access granted to users is READ access"})}),"\n",(0,a.jsx)(i.h2,{id:"problem",children:"Problem"}),"\n",(0,a.jsx)(i.p,{children:"Users can install MSI (Windows Installer Packages) from a USB drive where they have only been granted READ access by the Device Manager."}),"\n",(0,a.jsx)(i.h2,{id:"cause",children:"Cause"}),"\n",(0,a.jsx)(i.p,{children:"The Endpoint Policy Manager Device manager is working as expected. You can install an MSI from a USB drive where the user only has READ access because double-clicking (i.e., launching) an MSI is really only a READ event by C:\\Windows\\System32\\msiexec.exe, which reads the MSI's database contents and performs the install.\xa0MSIEXEC is doing the executing but only requires READ access to the MSI file in order to do so. In other words, Endpoint Policy Manager DM is a file filter driver which handles filters. If you give someone READ access, they have the filter to read the file. Then the MSIEXEC can pick up the ball and run with it."}),"\n",(0,a.jsx)(i.h2,{id:"possible-resolutions",children:"Possible Resolutions"}),"\n",(0,a.jsx)(i.p,{children:"In addition to limiting access to the USB drive by using Device Manager, the best way to stop MSIEXEC is to then use Endpoint Policy Manager Least Privilege Manager (LPM) to block MSIEXEC, since it is calling the input to the database."}),"\n",(0,a.jsx)(i.p,{children:"There are a few ways you can do this using Endpoint Policy Manager Least Privilege Manager:"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"You can block MSIEXEC directly from an .EXE rule with a DENY Executable policy."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"984_1_image-20230725214430-5_950x637",src:s(95266).A+"",width:"950",height:"637"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"You can block all .MSIs with a DENY Windows Installer Policy."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"984_2_image-20230725214430-6_950x580",src:s(575223).A+"",width:"950",height:"580"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"You can turn on Admin Approval."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"984_3_image-20230725214430-7_950x691",src:s(457962).A+"",width:"950",height:"691"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Why is an extra step in Least Privilege Manager needed? Because Endpoint Policy Manager Least Privilege Manager is a process driver which handles processes. If you specify what to do on a process level, Endpoint Policy Manager Least Privilege Manager handles it, including elevation and blocking."}),"\n",(0,a.jsx)(i.p,{children:"So, you cannot use Endpoint Policy Manager Device Manager to filter a PROCESS (MSIEXEC), but you could filter it for NO READ access to files."}),"\n",(0,a.jsx)(i.p,{children:"You cannot use Endpoint Policy Manager Least Privilege Manager to filter specific files, but you can filter it to tell MSIEXEC PROCESS what to do."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);