"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[883694],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(296540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},345106:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"threatprevention/admin/templates/folder/scripts/passwordchanges","title":"Password Changes Custom Script","description":"The following C# script sends an email notification to the specified user when their Active Directory password has changed.","source":"@site/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordchanges.md","sourceDirName":"threatprevention/admin/templates/folder/scripts","slug":"/threatprevention/admin/templates/folder/scripts/passwordchanges","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordchanges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordchanges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"threatPreventionSidebar","previous":{"title":"Lock and/or Unlock Account Custom Script","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/lockunlockaccount"},"next":{"title":"Password Never Expires Custom Script","permalink":"/docs/threatprevention/threatprevention/admin/templates/folder/scripts/passwordneverexpires"}}');var s=t(474848),i=t(28453);const a={},o="Password Changes Custom Script",l={},c=[];function p(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"password-changes-custom-script",children:"Password Changes Custom Script"})}),"\n",(0,s.jsx)(n.p,{children:"The following C# script sends an email notification to the specified user when their Active Directory password has changed."}),"\n",(0,s.jsx)(n.p,{children:"The following environmental variables must be added to the script prior to execution:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SMTPHOST \u2013 Name of the organization\u2019s SMTP server"}),"\n",(0,s.jsx)(n.li,{children:"SMTPPORT \u2013 Port used by the organization\u2019s SMTP server"}),"\n",(0,s.jsxs)(n.li,{children:["SMTPENABLESSL \u2013 Indicates whether SSL is enabled or disabled on the SMTP server","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"False = Do not use SSL"}),"\n",(0,s.jsx)(n.li,{children:"True = Use SSL"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"SMTPFROM \u2013 Valid email account sending the email to the recipient"}),"\n",(0,s.jsx)(n.li,{children:"SMTPID \u2013 Valid username for SMTP server within the user's environment"}),"\n",(0,s.jsx)(n.li,{children:"SMTPPwD \u2013 Valid password for the username above"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the Templates > Actions folder in the Navigation pane, the ",(0,s.jsx)(n.em,{children:"AD Changes: Notify user that his password changed"})," template is preconfigured to use this action script."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'namespace ScriptNamespace  \n{  \nusing System;  \nusing System.Collections;  \nusing System.IO;  \nusing System.Text;  \nusing SI.Common.Messages;  \nusing SI.SIMonitor.ConsoleMessages.Helpers;  \nusing System.Net.Mail;  \nusing System.DirectoryServices;\xa0  \npublic class ScriptClass  \n{  \nprivate const string SMTPHOST = "mail.MyDomain.com";  \nprivate const int SMTPPORT = 25;  \nprivate const bool SMTPENABLESSL = false;  \nprivate const bool SMTPUSEDEFAULTCREDENTIALS = true;  \nprivate const bool SMTPHTML = true;  \nprivate const string SMTPFROM = "From@MyDomain.by";  \nprivate const string SMTPSUBJECT = "Account password was changed";  \nprivate const string SMTPID = "username";  \nprivate const string SMTPPWD = "password";  \nprivate EventConsumerHelper helper = null;  \nprivate const string kUnicodePwdAttribute = "unicodepwd";  \nprivate const string kEmailAttribute = "mail";\xa0  \n/// Required class constructor  \npublic ScriptClass(EventConsumerHelper ecHelper)  \n{  \nthis.helper = ecHelper;  \n}\xa0  \npublic virtual void ScriptMain()  \n{  \nif (!helper.EventNameTranslated.ToLower().Equals("password changed"))  \nreturn;  \nif (!AttributeExists(helper.NewAttributes, kUnicodePwdAttribute))  \nreturn;\xa0  \nstring SMTPTO = GetStringAttribute(helper.DN, kEmailAttribute);  \nif (string.IsNullOrEmpty(SMTPTO))  \nthrow new Exception("AD attribute \'email\' is empty");\xa0  \nMailMessage msg = new MailMessage();  \nmsg.From = new MailAddress(SMTPFROM);  \nmsg.To.Add(SMTPTO);  \nmsg.Priority = MailPriority.High;  \nmsg.Subject = SMTPSUBJECT;\xa0  \nStringBuilder sb = new StringBuilder();  \nsb.AppendLine("<html>");  \nsb.AppendLine("<body>");  \nsb.AppendLine(String.Format("EventName: {0}<br>", helper.EventName));  \nsb.AppendLine(String.Format("EventNameTranslated: {0}<br>", helper.EventNameTranslated));  \nsb.AppendLine(String.Format("TimeLoggedUtc: {0}<br>", helper.TimeLoggedUtc.ToString("MMMM d, yyyy h:mm:ss tt")));  \nsb.AppendLine(String.Format("DN: {0}<br>", helper.DN));  \nsb.AppendLine(String.Format("Perpetrator: {0}<br>", helper.PerpetratorName));  \nsb.AppendLine("</body>");  \nsb.AppendLine("</html>");  \nstring body = sb.ToString();  \nmsg.Body = body;  \nmsg.IsBodyHtml = SMTPHTML;  \nSmtpClient client = new SmtpClient();  \nclient.Host = SMTPHOST;  \nclient.Port = SMTPPORT;  \nclient.EnableSsl = SMTPENABLESSL;  \nclient.UseDefaultCredentials = SMTPUSEDEFAULTCREDENTIALS;  \nif (!SMTPUSEDEFAULTCREDENTIALS)  \n{  \nclient.Credentials = new System.Net.NetworkCredential(SMTPID, SMTPPWD);  \n}  \nclient.DeliveryMethod = SmtpDeliveryMethod.Network;  \nclient.Send(msg);  \n}\xa0  \nprivate bool AttributeExists(System.Collections.Hashtable attributes, string attributename)  \n{  \nforeach (var att in attributes)  \n{  \nSystem.Collections.DictionaryEntry de = ((System.Collections.DictionaryEntry)(att));  \nif ((de.Key != null))  \n{  \nstring attrName = de.Key.ToString();  \nif (attrName.ToLower().Equals(""))  \nreturn true;  \n}  \n}  \nreturn false;  \n}  \nprivate string GetStringAttribute(string dn, string AttributeName)  \n{  \nstring result = string.Empty;  \ntry  \n{  \nDirectoryEntry root = new DirectoryEntry();  \nusing (DirectorySearcher searcher = new DirectorySearcher(root))  \n{  \nsearcher.Filter = "(distinguishedName=" + dn + ")";  \nsearcher.PropertiesToLoad.Clear();  \nsearcher.ReferralChasing = ReferralChasingOption.All;  \nsearcher.PropertiesToLoad.Add(AttributeName);  \nsearcher.ClientTimeout = new TimeSpan(0, 0, 10);\xa0  \nvar searchResult = searcher.FindOne();  \nif (searchResult != null)  \n{  \nif (searchResult.Properties.Contains(AttributeName))  \n{  \nresult = searchResult.Properties[AttributeName][0] as string;  \n}  \n}  \n}  \n}  \ncatch { }  \nreturn result;  \n}  \n}  \n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);