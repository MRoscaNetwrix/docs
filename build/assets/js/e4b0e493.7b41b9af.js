"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[477193],{28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>r});var i=t(296540);const o={},n=i.createContext(o);function l(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(n.Provider,{value:s},e.children)}},228102:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"policypak/leastprivilege/bestpractices/childprocesses","title":"When to Use \u201cApply to Child Processes\u201d","description":"NOTE: See the Security and Child Processes video for an overview of using Endpoint Policy Manager (formerly PolicyPak) Least Privilege Manager and Child Processes rules.","source":"@site/docs/policypak/policypak/leastprivilege/bestpractices/childprocesses.md","sourceDirName":"policypak/leastprivilege/bestpractices","slug":"/policypak/leastprivilege/bestpractices/childprocesses","permalink":"/docs/policypak/policypak/leastprivilege/bestpractices/childprocesses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/bestpractices/childprocesses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"How to Allow UiPath Assistant to run when running PowerShell is blocked for all Users","permalink":"/docs/policypak/policypak/leastprivilege/allow/uipathassistant"},"next":{"title":"When to Use \u201cDon\u2019t Elevate Open/Save Dialog\u201d","permalink":"/docs/policypak/policypak/leastprivilege/bestpractices/dontelevate"}}');var o=t(474848),n=t(28453);const l={},r="When to Use \u201cApply to Child Processes\u201d",c={},a=[];function p(e){const s={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"when-to-use-apply-to-child-processes",children:"When to Use \u201cApply to Child Processes\u201d"})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"NOTE:"})," See the ",(0,o.jsx)(s.a,{href:"/docs/policypak/policypak/video/leastprivilege/bestpractices/securitychildprocesses",children:"Security and Child Processes"})," video for an overview of using Endpoint Policy Manager (formerly PolicyPak) Least Privilege Manager and Child Processes rules."]}),"\n",(0,o.jsx)(s.p,{children:"![A screenshot of a computer"}),"\n",(0,o.jsx)(s.p,{children:"Description automatically generated](/img/product_docs/policypak/policypak/leastprivilege/bestpractices/when_to_use_apply_to_child.jpg)"}),"\n",(0,o.jsxs)(s.p,{children:["We suggest leaving the checkbox on for ",(0,o.jsx)(s.strong,{children:"Apply to Child Processes"})," when installing software. This will enable a ",(0,o.jsx)(s.code,{children:"Setup.exe"})," to elevate anything it unpacks and needs to continue to install. However, using ",(0,o.jsx)(s.strong,{children:"Apply to Child Processes"})," is not recommended when elevating specific applications where users could open their own dialog boxes. Some examples of this would be ",(0,o.jsx)(s.code,{children:"REGEDIT"})," or Acrobat Reader. In those cases, users could spawn a new process, which would also be elevated and perform functions that work around your security."]}),"\n",(0,o.jsxs)(s.p,{children:["If, however, you need to keep ",(0,o.jsx)(s.strong,{children:"Apply to Child Processes"})," on, you have some additional security mechanisms to prevent application to child processes in all circumstances."]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Don\u2019t apply to unsigned executables. If the application has no digital signature and is unsigned, do not apply the elevation level to child processes."}),"\n",(0,o.jsx)(s.li,{children:"Don\u2019t apply to untrusted executables. Don\u2019t pass the elevation status if the file\u2019s owner isn't on the SecureRun\u2122 list (when SecureRun\u2122 is being used). If SecureRun\u2122 is not used, do not elevate to the child processes unless the file owner is TrustedInstaller, Built-in\\Administrators, SYSTEM or %COMPUTERNAME%\\Administrator."}),"\n",(0,o.jsx)(s.li,{children:"Don\u2019t apply to executables signed by other publishers. Don\u2019t pass the elevation status if the application is not signed by the same signed vendor who originated the process."}),"\n",(0,o.jsx)(s.li,{children:"Don\u2019t apply to unrelated executables. Don\u2019t pass the elevation status if the application is not in the same directory structure (including recursively)."}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);