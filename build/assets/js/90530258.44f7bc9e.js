"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[871521],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(296540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},356071:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"groupid/portal/synchronize/script/visualbasicnetbasic","title":"Visual Basic .NET for Directory Manager (formerly GroupID)","description":"This topic discusses some points of information relevant to DTM scripting in Directory Manager. See Visual Basic Language Reference article for additional information.","source":"@site/docs/groupid/groupid/portal/synchronize/script/visualbasicnetbasic.md","sourceDirName":"groupid/portal/synchronize/script","slug":"/groupid/portal/synchronize/script/visualbasicnetbasic","permalink":"/docs/groupid/groupid/portal/synchronize/script/visualbasicnetbasic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/groupid/groupid/portal/synchronize/script/visualbasicnetbasic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"groupIdSidebar","previous":{"title":"Sample Transform Scripts","permalink":"/docs/groupid/groupid/portal/synchronize/script/sampletransformscript"},"next":{"title":"Auto-Generate Unique, Complex Passwords","permalink":"/docs/groupid/groupid/portal/synchronize/transformation/autogenerateuniquepassword"}}');var r=i(474848),t=i(28453);const a={},o="Visual Basic .NET for Directory Manager (formerly GroupID)",c={},l=[{value:"Differences between Visual Basic .NET and other Visual Basic versions",id:"differences-between-visual-basic-net-and-other-visual-basic-versions",level:2},{value:"Declaring variables",id:"declaring-variables",level:2},{value:"Manipulating Strings",id:"manipulating-strings",level:2},{value:"Line Continuation",id:"line-continuation",level:2},{value:"Decision Structures",id:"decision-structures",level:2},{value:"Loops",id:"loops",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"visual-basic-net-for-directory-manager-formerly-groupid",children:"Visual Basic .NET for Directory Manager (formerly GroupID)"})}),"\n",(0,r.jsxs)(n.p,{children:["This topic discusses some points of information relevant to DTM scripting in Directory Manager. See ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/",children:"Visual Basic Language Reference"})," article for additional information."]}),"\n",(0,r.jsx)(n.h2,{id:"differences-between-visual-basic-net-and-other-visual-basic-versions",children:"Differences between Visual Basic .NET and other Visual Basic versions"}),"\n",(0,r.jsxs)(n.p,{children:["Visual Basic .NET is largely a superset of Visual Basic 6. If you are familiar with Visual Basic before the advent of .NET technology, you may wish to refer to ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/skw8dhdd(v%3dvs.90)",children:"Language Changes in Visual Basic"}),", and particularly to ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/kaf4ssya(v%3dvs.90)",children:"Programming Element Support Changes Summary"}),".\nFor the most part, statements and constructs that worked in Visual Basic 6, Visual BasicScript, and Visual BasicA continue to work in Visual Basic .NET."]}),"\n",(0,r.jsx)(n.p,{children:"Important: A key difference, however, is that the Set keyword is no longer used to assign a value to an object. Simply omit it!"}),"\n",(0,r.jsx)(n.h2,{id:"declaring-variables",children:"Declaring variables"}),"\n",(0,r.jsx)(n.p,{children:"Variables must be declared via the Dim keyword prior to, or concurrent with, their first use. Optionally, you can indicate the data type of the variable in the declaration."}),"\n",(0,r.jsx)(n.p,{children:"The following declarations are valid:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dim Lastname"}),"\n",(0,r.jsx)(n.li,{children:"Dim Lastname, Firstname"}),"\n",(0,r.jsx)(n.li,{children:"Dim Lastname, Firstname As String"}),"\n",(0,r.jsx)(n.li,{children:'Dim Lastname = DTM.Source("sn")'}),"\n",(0,r.jsx)(n.li,{children:'Dim Lastname As String = DTM.Source("sn")'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"manipulating-strings",children:"Manipulating Strings"}),"\n",(0,r.jsx)(n.p,{children:"The most common use of Synchronize scripting is to dissect and combine strings. String literals are always enclosed in quotes, and Visual Basic provides the operator for concatenating strings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Dim Fullname = Lastname & ", " & Firstname\n'})}),"\n",(0,r.jsx)(n.p,{children:"Visual Basic also provides a host of global functions that perform various string manipulations, for example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Len(Str): e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Dim LengthOfName = Len(Fullname)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Left(Str, Length): e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Dim MiddleInitial = Left(DTM.Source("middleName"), 1)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Mid(Str, Start, Length): e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Dim SeventhCharacter = Mid(Fullname, 7, 1)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"LCase(Str): e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Dim LowerCaseName = LCase(Fullname)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For a list of such string functions, see the ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary",children:"String Manipulation Summary"})," topic."]}),"\n",(0,r.jsx)(n.p,{children:"As an alternative to global functions (which are handed down from Visual Basic before the advent of .NET technology) you can instead use the .NET string class and related classes. These methods can only be applied to a variable if you declare the\ndata type of the variable to be As String (as in Dim Lastname As String). Unlike global functions, positions within a string are 0-based (that is, the first character occupies position 0) instead of 1-based (the\nfirst character occupies position 1)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"String.Length: e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Dim LengthOfName As Integer = Fullname.Length\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"String.Substring(Start, Length): e.g.,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Dim MiddleInitial As String = DTM.Source("middleName").Substring(0, 1)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"String.ToLower(): e.g."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Dim LowerCaseName As String = Fullname.ToLower()\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For a list of such string methods, see ",(0,r.jsx)(n.a,{href:"https://msdn.microsoft.com/en-us/library/system.string_methods(v%3dvs.110).aspx",children:".NET String Methods"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"line-continuation",children:"Line Continuation"}),"\n",(0,r.jsx)(n.p,{children:"With extensive string manipulation, statement lines frequently become quite long. In order to break a statement into two or more lines, insert a space followed by an underline (\u201d_\u201d) just prior to each line break."}),"\n",(0,r.jsx)(n.p,{children:'NOTE: Be sure to insert the line break characters ("_") outside of a string literal.'}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Dim DistinguishedName = "cn=Sales,CN=SF,CN=WestCoast,CN=Users," _  \n& "OU=corporation,DC=dc2000,DC=imanami,DC=biz"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"decision-structures",children:"Decision Structures"}),"\n",(0,r.jsx)(n.p,{children:"You can make decisions in your script using the If-Then or If-Then-Else constructs. These require a condition clause that evaluates to true or false."}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Dim Fullname = DTM.Source("sn")  \nIf Len(DTM.Source("givenName")) > 0 Then  \nFullname = Fullname & ", " & DTM.Source("givenName")  \nEnd If\n'})}),"\n",(0,r.jsx)(n.p,{children:"Example 2:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'If DTM.Source("Department") = "Sales" Then  \nDTM.Result = "cn=Sales,CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nElse  \nDTM.Result = "CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nEnd If\n'})}),"\n",(0,r.jsx)(n.p,{children:"To perform one of a number of alternative actions based on the value of a variable, the Select Case construct comes in handy. In this example, note the use of the global LCase function. This example illustrates a how\nto make case-insensitive string comparisons."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Select Case LCase(DTM.Source("Department"))  \nCase "sales"  \nDTM.Result = "cn=Sales,CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nCase "engineering"  \nDTM.Result = "cn=Eng,CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nCase "admin"  \nDTM.Result = "cn=Admin,CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nCase Else  \nDTM.Result = "CN=Users,DC=dc2000,DC=imanami,DC=biz"  \nEnd Select\n'})}),"\n",(0,r.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,r.jsx)(n.p,{children:"It is uncommon to use loops in a DTM script, since the script itself is executed in the context of a single source row (or object) and a single destination row (or object). However, complex string manipulations may require iterating through the characters\nof a string. Iteration through the characters is most easily accomplished using the or Each construct."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.p,{children:"Count the number of numeric digits in an alphanumeric ID source field using the IsDigit() shared function of the .Net Char class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\xa0Dim Count = 0  \n\xa0For Each ch As Char In DTM.Source("ID")  \n\xa0If Char.IsDigit(ch) Then  \n\xa0Count = Count + 1  \n\xa0End If  \n\xa0Next  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);