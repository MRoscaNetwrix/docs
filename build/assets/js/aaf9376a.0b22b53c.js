"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[255739],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(296540);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}},999738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"passwordsecure/maintenance/migration_guide","title":"migration_guide","description":"Migration Guide: Breaking Changes - API Login","source":"@site/docs/passwordsecure/passwordsecure/maintenance/migration_guide.md","sourceDirName":"passwordsecure/maintenance","slug":"/passwordsecure/maintenance/migration_guide","permalink":"/docs/passwordsecure/passwordsecure/maintenance/migration_guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/passwordsecure/passwordsecure/maintenance/migration_guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"passwordSecureSidebar","previous":{"title":"Webserver","permalink":"/docs/passwordsecure/passwordsecure/installation/requirements/webserver"},"next":{"title":"Moving the server","permalink":"/docs/passwordsecure/passwordsecure/maintenance/moving_the_server"}}');var a=n(474848),r=n(28453);const s={},o=void 0,d={},u=[{value:"Migration Guide: Breaking Changes - API Login",id:"migration-guide-breaking-changes---api-login",level:2},{value:"Why was this change done?",id:"why-was-this-change-done",level:4},{value:"C#",id:"c",level:4},{value:"JavaScript",id:"javascript",level:4},{value:"Implementation explanation",id:"implementation-explanation",level:4}];function c(e){const t={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"migration-guide-breaking-changes---api-login",children:"Migration Guide: Breaking Changes - API Login"}),"\n",(0,a.jsx)(t.p,{children:"Overview: We've enhanced the login authentication process to offer a more dynamic and secure experience. This update introduces a new method of authentication, effective for servers from version 8.12 onward."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"CAUTION:"})," Important Update: Starting from server version 9.0, the previous login method will no longer be functional. Users must adopt the new authentication approach provided in our API to continue accessing the services."]}),"\n",(0,a.jsx)(t.h4,{id:"why-was-this-change-done",children:"Why was this change done?"}),"\n",(0,a.jsx)(t.p,{children:"Since version 8.12, our server and clients are supporting authentication methods other than passwords. Therefore, we have introduced a two-step authentication in our server and our clients. After entering the username, the server is asked for the main factor for the authentication.With the release of version 8.12, our server and client applications have expanded their support for authentication methods beyond traditional passwords. Consequently, to enhance security, a two-step authentication process has been introduced within both our server and client environments. This process entails the user inputting their username, followed by a request to the server for the primary authentication factor. Notably, this change was not initially implemented in our APIs."}),"\n",(0,a.jsx)(t.p,{children:"To align our systems with enhanced security standards, we have undertaken the implementation of the new PBKDF2 hashing iteration count. As part of this transition, we have made the strategic decision to discontinue the use of the old authentication endpoint. Subsequently, we have diligently integrated the new authentication mechanism into our APIs to ensure a consistent and secure user experience."}),"\n",(0,a.jsx)(t.p,{children:"Transition details:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Old Method Deprecation"}),": The previous login method is deprecated and no longer operational with servers of version 9.0."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"New Authentication Requirement:"})," To access our services, users must switch to the updated authentication method in our APIs, compatible with servers from version 8.12 onward. Versions older than 8.12 are no longer operational with the API. If you're using such an old version, please use the old API."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"CAUTION:"})," Action Required: Ensure that your server version is 8.12 or later to implement the new authentication method and seamlessly access our services. Update your integration with the API to incorporate the revised login interface and maintain uninterrupted service access."]}),"\n",(0,a.jsx)(t.p,{children:"Below are code examples for the previous and updated authentication methods."}),"\n",(0,a.jsx)(t.h4,{id:"c",children:"C#"}),"\n",(0,a.jsx)(t.p,{children:"Previous authentication method (deprecated)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'var database = "your-database";  \nvar username = "your-username";  \nvar password = "your-password";  \nvar psrApi = new PsrApi("your-endpoint");  \nvar mfaRequest = await psrApi.AuthenticationManager.Login(database, username, password);  \nwhile (mfaRequest != null) {  \n\xa0\xa0\xa0\xa0// Gathering user input for authentication fields  \n\xa0\xa0\xa0\xa0Console.Write(mfaRequest.DisplayName);\xa0  \n\xa0\xa0\xa0\xa0foreach (var field in mfaRequest.RequiredFields)  \n\xa0\xa0\xa0\xa0{  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Console.Write(field.Type.ToString());\xa0  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0var mfa = Console.ReadLine();  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0field.Value = mfa;  \n\xa0\xa0\xa0\xa0}\xa0  \n\xa0\xa0\xa0\xa0mfaRequest = await psrApi.AuthenticationManager.Login(database, username, password, mfaRequest.RequiredFields);  \n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"New authentication method (required for version 9.0 onwards)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'var database = "your-database";  \nvar username = "your-username";  \nvar psrApi = new PsrApi("your-endpoint");  \nvar authenticationFlow = psrApi.AuthenticationManagerV2.StartNewAuthentication(database, username);  \nawait authenticationFlow.StartLogin();  \nwhile (!authenticationFlow.IsAuthenticated) {  \n\xa0\xa0\xa0\xa0var requirement = authenticationFlow.GetNextRequirement();  \n\xa0\xa0\xa0\xa0var selectedRequirement = requirement.PossibleRequirements.FirstOrDefault() as DynamicFillableAuthentication;  \n\xa0\xa0\xa0\xa0foreach (var field in selectedRequirement.Fields) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Gather user input for authentication fields from the console  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Console.Write(field.Key);  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0field.Value = Console.ReadLine();  \n}  \n\xa0\xa0\xa0\xa0await authenticationFlow.Authenticate(selectedRequirement);  \n}\n'})}),"\n",(0,a.jsx)(t.h4,{id:"javascript",children:"JavaScript"}),"\n",(0,a.jsx)(t.p,{children:"Previous authentication method (deprecated)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"const database = 'your-database'  \nconst username = 'your-username'  \nconst password = 'your-password'  \nlet api = new PsrApi('your-endpoint')  \nlet mfaRequest = await psrApi.authenticationManager.login(database, username, password)  \nwhile (mfaRequest) {  \n\xa0\xa0\xa0\xa0for (const field of mfaRequest.requiredFields) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0field.value = prompt(field.type)  \n\xa0\xa0\xa0\xa0}  \n\xa0\xa0\xa0\xa0mfaRequest = await psrApi.authenticationManager.login(database, username, password, mfaRequest.requiredFields);  \n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"New authentication method (required for version 9.0 onwards)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"const database = 'your-database'  \nconst username = 'your-username'  \nlet api = new PsrApi('your-endpoint')  \nawait psrApi.authenticationManagerV2.startLogin(database, username)  \nwhile (!psrApi.authenticationManagerV2.isAuthenticated) {  \n\xa0\xa0\xa0\xa0let requirement = await psrApi.authenticationManagerV2.getNextRequirement()  \n\xa0\xa0\xa0\xa0let selectedRequirement = requirement.PossibleRequirements[0]  \n\xa0\xa0\xa0\xa0for (const field of selectedRequirement.Fields) {  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Simulating console interaction to gather user input  \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0field.Value = prompt(field.Key)  \n\xa0\xa0\xa0\xa0}\xa0  \n\xa0\xa0\xa0\xa0await psrApi.authenticationManagerV2.authenticate(selectedRequirement)  \n}\n"})}),"\n",(0,a.jsx)(t.h4,{id:"implementation-explanation",children:"Implementation explanation"}),"\n",(0,a.jsx)(t.p,{children:"The API object is created as always: by passing the server address to the constructor."}),"\n",(0,a.jsxs)(t.p,{children:["After that, the implementation differs slightly between C# and JavaScript. For C#, we\u2019re getting the authentication flow via ",(0,a.jsx)(t.strong,{children:'psrApi.AuthenticationManagerV2.StartNewAuthentication("your-database", "your-username");'}),". On the resulting instance, the asynchronous method ",(0,a.jsx)(t.strong,{children:"StartLogin()"})," needs to be called and awaited. Using the JavaScript API, we can directly call and await the ",(0,a.jsx)(t.strong,{children:"psrApi.authenticationManagerV2.startLogin('your-database', 'your-username)"})," method."]}),"\n",(0,a.jsxs)(t.p,{children:["After this, you must call the ",(0,a.jsx)(t.strong,{children:"GetNextRequirement()"})," method. The result contains the requirements the user has to fill in. It usually contains a \u201cFields\u201c list, where the \u201cValue\u201d needs to be set. The filled requirements need to be sent to the server via ",(0,a.jsx)(t.strong,{children:"psrApi.authenticationManagerV2.authenticate"})," method. Don\u2019t forget to wait for the result (using the ",(0,a.jsx)(t.strong,{children:"await"})," keyword)."]}),"\n",(0,a.jsxs)(t.p,{children:["Now, the authentication via API also provides the possibility to configure a second factor and change the user password during login. In this case, the result of the ",(0,a.jsx)(t.strong,{children:"GetNextRequirement"})," call has the property \u201cIsConfiguration\u201d set to true. If the user can choose between multiple second factors, they are all part of the \u201cPossibleRequirements\u201d array. Select the one you want to use, fill in the fields, and send the requirement via ",(0,a.jsx)(t.strong,{children:"authenticate"})," method."]}),"\n",(0,a.jsxs)(t.p,{children:["As soon as the authentication is completed, the ",(0,a.jsx)(t.strong,{children:"psrApi.authenticationManagerV2.isAuthenticated"})," property is set to true."]}),"\n",(0,a.jsx)(t.p,{children:"For any queries or assistance in transitioning to the new authentication method, please refer to our updated documentation or reach out to our support team."}),"\n",(0,a.jsx)(t.p,{children:"Thank you for your cooperation as we continue to improve security and usability within our API."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);