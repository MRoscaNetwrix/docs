"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[657609],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(296540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},929403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient/index","title":"OpenIdClient","description":"OpenIdClient declares an OpenID Connect clientId/secret to call the Identity Manager API.","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient","slug":"/usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/access-control/openidclient/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Assigned Profile","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/access-control/assignedprofile/"},"next":{"title":"Profile","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/access-control/profile/"}}');var i=n(474848),o=n(28453);const s={},c="OpenIdClient",l={},d=[{value:"Examples",id:"examples",level:2},{value:"Properties",id:"properties",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"openidclient",children:"OpenIdClient"})}),"\n",(0,i.jsx)(t.p,{children:"OpenIdClient declares an OpenID Connect clientId/secret to call the Identity Manager API.\nAll the configurations need at least one clientId used by all the jobs on the agent side to call the server."}),"\n",(0,i.jsx)(t.p,{children:"Only the hashed secret is kept in the configuration. The clear version is only known by the API callers."}),"\n",(0,i.jsx)(t.p,{children:"The secret must be strong enough to protect access to the API."}),"\n",(0,i.jsxs)(t.p,{children:["The good practice is generating a random secret, for example a 32 characters string, from a tool like KeePass. Each clientId must have it's own secret.\nThe tool ",(0,i.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/executables/references/new-openidsecret/",children:"\nUsercube-New-OpenIDSecret\n"})," can be used to generate secrets and their hashes."]}),"\n",(0,i.jsxs)(t.p,{children:["Each clientId must have a scope of responsibility. The ",(0,i.jsx)(t.em,{children:"Profile"})," and ",(0,i.jsx)(t.em,{children:"ContextId"})," properties assign a required Profile and an optional Profile Context."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"The following code declares a clientId with the Administrator profile."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'\n<OpenIdClient Identifier="Job" HashedSecret="K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=" DisplayName_L1="ClientId for Jobs" Profile="Administrator" />\n\n'})}),"\n",(0,i.jsx)(t.p,{children:"The following code example declares a clientId with the RoleOfficerByCategory profile, restricted to the profile context defined below. The ContextId property must reference the Id of an existing Profile Context. Profile contexts don't have identifiers, so to avoid recalculation of the ProfileContext's Id property on configuration deployment, the Id should be declared manually as below. To be valid, it must be lower or equal to -2."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'\n<OpenIdClient Identifier="RoleOfficerByCategory" HashedSecret="K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=" DisplayName_L1="Role Officer by Category" Profile="RoleOfficerByCategory" ContextId="-2" /><ProfileContext Id="-2" Category="IT Administration" D0="ORG0003" />\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Details"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Context   optional"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    Int64   ",(0,i.jsx)(t.strong,{children:"Description"}),"   Id of the ProfileContext used to further restrict the client scope of responsibility"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DisplayName_L1   required"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    String   ",(0,i.jsx)(t.strong,{children:"Description"}),"   Name that will be Displayed on the screen"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ExpirationDate   optional"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    DateTime   ",(0,i.jsx)(t.strong,{children:"Description"}),"   After this date, the client is no longer usable"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"HashedSecret   required"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    String   ",(0,i.jsx)(t.strong,{children:"Description"}),"   HashedPassword of client"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Identifier   required"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    String   ",(0,i.jsx)(t.strong,{children:"Description"}),"   Client login name and name"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Profile   required"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Type"}),"    Int64   ",(0,i.jsx)(t.strong,{children:"Description"}),"   Profile linked with the client"]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);