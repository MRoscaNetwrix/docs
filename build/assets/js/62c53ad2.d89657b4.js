"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[922049],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(296540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},169577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"usercube/integration-guide/executables/references/export-excel/index","title":"Usercube-Export-Excel","description":"Examples","source":"@site/docs/usercube_saas/usercube/integration-guide/executables/references/export-excel/index.md","sourceDirName":"usercube/integration-guide/executables/references/export-excel","slug":"/usercube/integration-guide/executables/references/export-excel/","permalink":"/docs/usercube_saas/usercube/integration-guide/executables/references/export-excel/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube_saas/usercube/integration-guide/executables/references/export-excel/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSaasSidebar","previous":{"title":"Usercube-Export-EasyVista","permalink":"/docs/usercube_saas/usercube/integration-guide/executables/references/export-easyvista/"},"next":{"title":"Usercube-Export-Scim","permalink":"/docs/usercube_saas/usercube/integration-guide/executables/references/export-scim/"}}');var r=n(474848),i=n(28453);const o={},c="Usercube-Export-Excel",l={},a=[{value:"Examples",id:"examples",level:2},{value:"Exporting a file respecting the default parameters",id:"exporting-a-file-respecting-the-default-parameters",level:3},{value:"Skipping some file&#39;s lines",id:"skipping-some-files-lines",level:3},{value:"Regex in file name",id:"regex-in-file-name",level:3},{value:"Choosing value to trim",id:"choosing-value-to-trim",level:3},{value:"Ignoring particular sheets",id:"ignoring-particular-sheets",level:3},{value:"Path Duality and the Not-Launch-Export System",id:"path-duality-and-the-not-launch-export-system",level:2},{value:"Arguments",id:"arguments",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"usercube-export-excel",children:"Usercube-Export-Excel"})}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.h3,{id:"exporting-a-file-respecting-the-default-parameters",children:"Exporting a file respecting the default parameters"}),"\n",(0,r.jsxs)(t.p,{children:["Consider the file ",(0,r.jsx)(t.code,{children:"C:/UsercubeContoso/Sources/hr_example.xlsx"})," with ",(0,r.jsx)(t.code,{children:"UTF8"})," encoding, it can be exported using these command's arguments:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"--raw-files-path C:/UsercubeContoso/Sources/hr_example.xlsx --not-incremental --connection-identifier HREXAMPLE --output-path C:/UsercubeContoso/Temp/ExportOutput"})}),"\n",(0,r.jsxs)(t.p,{children:["The output file(s) will be located in ",(0,r.jsx)(t.code,{children:"C:/UsercubeContoso/Temp/ExportOutput/"}),".\nTheir number corresponds to the number of sheets in the XLSX file and they would be labeled: ",(0,r.jsx)(t.code,{children:"HREXAMPLE_0.csv"}),", ",(0,r.jsx)(t.code,{children:"HREXAMPLE_1.csv"}),", ... ",(0,r.jsx)(t.code,{children:"HREXAMPLE_n-1.csv"})," where n corresponds to the amount of spread sheets of the XLSX file.\nThe encoding is ",(0,r.jsx)(t.code,{children:"UTF8"})," and the separator is ",(0,r.jsx)(t.code,{children:","}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"skipping-some-files-lines",children:"Skipping some file's lines"}),"\n",(0,r.jsxs)(t.p,{children:["The possibility to skip lines is made available using the ",(0,r.jsx)(t.code,{children:"--lines-to-skip"})," argument:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"--raw-files-path C:/UsercubeContoso/Sources/hr_example.xlsx --not-incremental --connection-identifier HREXAMPLE --output-path C:/UsercubeContoso/Temp/ExportOutput --lines-to-skip 10"})}),"\n",(0,r.jsx)(t.p,{children:"As a consequence, the exported file would include the content of the XLSX file without the ten first lines."}),"\n",(0,r.jsx)(t.h3,{id:"regex-in-file-name",children:"Regex in file name"}),"\n",(0,r.jsxs)(t.p,{children:["Considering a generated file following the regex: ",(0,r.jsx)(t.code,{children:"C:/UsercubeContoso/Sources/hr_example(.*?).xlsx"}),", for instance ",(0,r.jsx)(t.code,{children:"C:/UsercubeContoso/Sources/hr_example5fH8g1.xlsx"}),", if several files match with the regex, the executable would use the most recent one."]}),"\n",(0,r.jsxs)(t.p,{children:["The regex can be included in the filename and would need to be precised using the ",(0,r.jsx)(t.code,{children:"--is-regex"})," argument:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"--raw-files-path C:/UsercubeContoso/Sources/hr_example(.*?).xlsx --not-incremental --connection-identifier HREXAMPLE --output-path C:/UsercubeContoso/Temp/ExportOutput --is-regex"})}),"\n",(0,r.jsx)(t.h3,{id:"choosing-value-to-trim",children:"Choosing value to trim"}),"\n",(0,r.jsxs)(t.p,{children:["It's possible to precise characters to trim using the ",(0,r.jsx)(t.code,{children:"--values-to-trim"})," argument:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"--raw-files-path C:/UsercubeContoso/Sources/hr_example.xlsx --not-incremental --connection-identifier HREXAMPLE --output-path C:/UsercubeContoso/Temp/ExportOutput --values-to-trim e"})}),"\n",(0,r.jsx)(t.p,{children:'The CSV output file will see every words beginning and ending by "e" (lower-case, this process is case sensitive) removed of this letter.'}),"\n",(0,r.jsx)(t.h3,{id:"ignoring-particular-sheets",children:"Ignoring particular sheets"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"--sheets-ignored"})," argument allows the user to specify for each sheet if it should be ignored during the export.\nMore precisely, a list of true or false arguments should be specified respectively to the sheets.\nLet's say the ",(0,r.jsx)(t.code,{children:"C:/UsercubeContoso/Sources/hr_example.xlsx"})," file possesses three sheets, in order to export the first and the last ones the arguments would be:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"--raw-files-path C:/UsercubeContoso/Sources/hr_example.xlsx --not-incremental --connection-identifier HREXAMPLE --output-path C:/UsercubeContoso/Temp/ExportOutput --sheets-ignored false true true false"})}),"\n",(0,r.jsxs)(t.p,{children:["Thus, two CSV files would be created corresponding to the the chosen ones: ",(0,r.jsx)(t.code,{children:"HREXAMPLE_0.csv"})," and ",(0,r.jsx)(t.code,{children:"HREXAMPLE_3.csv"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"path-duality-and-the-not-launch-export-system",children:"Path Duality and the Not-Launch-Export System"}),"\n",(0,r.jsxs)(t.p,{children:["The export executable might be used for a complete or an incremental synchronization.\nThus, it possesses two paths that could be precised - depending on the case - with the ",(0,r.jsx)(t.code,{children:"--raw-files-path"})," for complete synchronizations argument or the ",(0,r.jsx)(t.code,{children:"--path-incremental"})," for incremental ones."]}),"\n",(0,r.jsxs)(t.p,{children:["At the end of the day, the ",(0,r.jsx)(t.code,{children:"--not-incremental"})," argument defines the export behavior: if present it means a complete synchronization should be performed and the ",(0,r.jsx)(t.code,{children:"--raw-files-path"})," argument must be precised; if missing an incremental synchronization would be performed using ",(0,r.jsx)(t.code,{children:"--path-incremental"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["It means that if the user provide the ",(0,r.jsx)(t.code,{children:"--not-incremental"})," argument and no ",(0,r.jsx)(t.code,{children:"--raw-files-path"}),", or if the user doesn't provide ",(0,r.jsx)(t.code,{children:"--not-incremental"})," nor ",(0,r.jsx)(t.code,{children:"--path-incremental"}),", the export will not be launched to prevent any issue (complete data for an incremental synchronization for instance).\nThe ",(0,r.jsx)(t.code,{children:"--force-complete"})," argument bypasses this safeguard: during the initialization job for example, where we want to perform a complete synchronization, even for Excel connections with only an incremental path."]}),"\n",(0,r.jsx)(t.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Argument Name"}),(0,r.jsx)(t.th,{children:"Details"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"--not-incremental   optional"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    No Value   ",(0,r.jsx)(t.strong,{children:"Description"})," Specifies the synchronization mode, its presence meaning complete, its absence incremental."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"--is-regex   optional"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    No Value   ",(0,r.jsx)(t.strong,{children:"Description"})," The file's name is a regex so we find the last generated corresponding file."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"---"}),(0,r.jsx)(t.td,{children:"---"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"--connection-identifier   optional"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    String   ",(0,r.jsx)(t.strong,{children:"Description"})," Connector's connection identifier. The output file will have this identifier as name."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"--output-path   required"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Type"}),"    String   ",(0,r.jsx)(t.strong,{children:"Description"})," Output path for the files generated by the export."]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);