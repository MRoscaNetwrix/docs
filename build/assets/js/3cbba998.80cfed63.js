"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93956],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(296540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},250284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask/index","title":"Invoke Sql Command Task","description":"Takes as input an SQL file or an SQL command to output several CSV files that can be used by the collection.","source":"@site/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask/index.md","sourceDirName":"usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask","slug":"/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokesqlcommandtask/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"Invoke Expression Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/invokeexpressiontask/"},"next":{"title":"Prepare Synchronization Task","permalink":"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/jobs/tasks/agent/preparesynchronizationtask/"}}');var s=n(474848),o=n(28453);const r={},a="Invoke Sql Command Task",d={},c=[{value:"Examples",id:"examples",level:2},{value:"Properties",id:"properties",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"invoke-sql-command-task",children:"Invoke Sql Command Task"})}),"\n",(0,s.jsx)(t.p,{children:"Takes as input an SQL file or an SQL command to output several CSV files that can be used by the collection."}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(t.p,{children:["Code attributes enclosed with ",(0,s.jsx)(t.code,{children:"<>"})," need to be replaced with a custom value before entering the script in the command line."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'<InvokeSqlCommandTask Identifier="SQL_Command" DisplayName_L1="SQL Command" SQLCommand="SELECT id FROM uj_jobs" Agent="Local" OpenIdClient="Job" DatabaseIdentifier="UsercubeDemo" />\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"NOTE:"})," The database Identifier attribute has a specific location where the connection strings for the database identifiers need to be defined. See the ",(0,s.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/network-configuration/agent-configuration/appsettings-agent/",children:"appsettings.agent"}),"topic for additional information."]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DisplayName_L1   required"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Display name of the task in language 1 (up to 16)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Agent   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsxs)(t.td,{children:["Identifier of the agent on which the job will be launched.  ",(0,s.jsx)(t.strong,{children:"NOTE:"})," When not specified, the task is to be launched on the server.  ",(0,s.jsx)(t.em,{children:"Remember,"}),"  all jobs containing the task must be launched on the same agent or on the server."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ContinueOnError   default value: false"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:"True if the execution of the Task returning an error should not stop the job machine state."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DatabaseIdentifier   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Identifier of the Database to connect to"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Encoding   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsxs)(t.td,{children:["Encoding for the output files. ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding#see-the-list-of-available-encodings",children:"See the list of available encodings"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Identifier   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Unique identifier of the task."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IsNotAQuery   default value: false"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:"To know if the SQL command is a query or not."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IsolationLevel   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Specifies the transaction locking behavior for the database connection."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OpenIdClient   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Connection client for the task."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPath   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Path to save file.   Alternative definition: If TaskType is:   - ProvisioningPolicyTask: Path to save the LDIF file,   - CollectorTask: Path of the working directory,   - CollectorChangesTask: Path of the working directory,   - CollectorADDirSyncTask: Path of the working directory,   - ProvisionerDownloadTask: Path of the destination directory,"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Provider   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"The database provider."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ProviderAssemblyQualifiedName   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Database provider assembly qualified name."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SQLCommand   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"SQL Command to execute."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SQLInputFile   optional"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Path of the SQL file."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Timeout   default value: 0"}),(0,s.jsx)(t.td,{children:"Int32"}),(0,s.jsx)(t.td,{children:"Specify the timeout if the query need more 30 sec."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);