"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10888],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(296540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},63311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings/index","title":"Adjust Scaffolded Configuration","description":"This guide shows how to adjust the XML configuration elements created by scaffoldings.","source":"@site/docs/usercube_saas/usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings/index.md","sourceDirName":"usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings","slug":"/usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings/","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube_saas/usercube/integration-guide/toolkit/how-tos/adjust-scaffoldings/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSaasSidebar","previous":{"title":"Hierarchy in Configuration Files","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/file-hierarchy/"},"next":{"title":"Deploy the Configuration","permalink":"/docs/usercube_saas/usercube/integration-guide/toolkit/how-tos/deploy-configuration/"}}');var s=t(474848),r=t(28453);const o={},a="Adjust Scaffolded Configuration",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Adjust Scaffolded Configuration",id:"adjust-scaffolded-configuration-1",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"adjust-scaffolded-configuration",children:"Adjust Scaffolded Configuration"})}),"\n",(0,s.jsx)(n.p,{children:"This guide shows how to adjust the XML configuration elements created by scaffoldings."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"A scaffolding is an XML element that will generate a complex XML fragment. It is like a configuration shortcut that helps configure easily a set of XML elements that are usually configured together."}),"\n",(0,s.jsxs)(n.p,{children:["See the list of all existing ",(0,s.jsx)(n.a,{href:"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/",children:"Scaffoldings"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In most situations, scaffoldings are enough to generate the configuration required to meet the functional needs."}),"\n",(0,s.jsx)(n.p,{children:"However, in some cases, scaffoldings do not meet the exact needs and must be adjusted to generate the right XML configuration."}),"\n",(0,s.jsx)(n.p,{children:"NETWRIX recommends writing XML configuration by first using scaffoldings, adjusting it if needed, and as a last resort, when no scaffolding meets the needs, writing the configuration manually."}),"\n",(0,s.jsx)(n.h2,{id:"adjust-scaffolded-configuration-1",children:"Adjust Scaffolded Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Adjust XML configuration generated by a scaffolding by proceeding as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["When working via the UI, start by exporting UI configuration elements. See the ",(0,s.jsx)(n.a,{href:"/docs/usercube_saas/usercube/integration-guide/executables/references/export-configuration/",children:"\nUsercube-Export-Configuration\n"})," topic for additional information."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Write an XML element whose identifier is the same as the one generated by the scaffolding."}),"\n",(0,s.jsxs)(n.p,{children:["Any identifier can be found in the ",(0,s.jsx)(n.a,{href:"/docs/usercube_saas/usercube/integration-guide/toolkit/xml-configuration/configuration/scaffoldings/",children:"Scaffoldings"})," topic, in the section displaying the generated XML fragment."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.code,{children:"ConsolidationMode"})," to the element's properties."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"By default, the XML item written manually completely replaces the one generated by the scaffolding."}),"\n",(0,s.jsx)(n.p,{children:"The default behavior should be used when needing to rewrite one or a few of the items generated by a scaffolding, not all of them."}),"\n",(0,s.jsx)(n.p,{children:"When needing to rewrite the scaffolding's whole output, just remove the scaffolding and write the item(s) manually."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For example, the ",(0,s.jsx)(n.code,{children:"ViewTemplateAdaptable"})," scaffolding generates, for the ",(0,s.jsx)(n.code,{children:"LDAP_Entry"})," entity type, a default display name for all LDAP resources, a display table to view the resources, and the corresponding permissions to access the table. Supposing that the resulting display table does not fit the needs, we could need to write a customized display table from scratch:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<DisplayTable Identifier="LDAP_Entry" EntityType="LDAP_Entry" DisplayTableDesignElement="resourcetable" IsEntityTypeDefault="true">  <Column DefaultSortPriority="1" DisplayBinding="dn" IsDisplayInSummaryView="true" IsResizable="true" IsSortable="true" CanBeFiltered="true" ColumnSize="4" />  <Column DisplayBinding="rdn" IsDisplayInSummaryView="true" IsResizable="true" IsSortable="true" CanBeFiltered="true" ColumnSize="2" />  <Column DisplayBinding="displayName" IsDisplayInSummaryView="true" IsResizable="true" IsSortable="true" CanBeFiltered="true" ColumnSize="2" />  <Column DisplayBinding="objectClass" IsDisplayInSummaryView="true" IsResizable="true" IsSortable="true" CanBeFiltered="true" ColumnSize="2" /></DisplayTable>\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The display table's identifier must be the same as the one generated by the scaffolding. Then the scaffolding is ignored so the display table ",(0,s.jsx)(n.code,{children:"LDAP_Entry"})," is defined by the ",(0,s.jsx)(n.code,{children:"<DisplayTable .../>"})," properties written manually here, as well as its ",(0,s.jsx)(n.code,{children:"<Column .../>"})," child elements written manually here."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Still from the ",(0,s.jsx)(n.code,{children:"ViewTemplateAdaptable"})," scaffolding, suppose now that the default display name does not fit the needs, then we could write a customized display name from scratch:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<EntityPropertyExpression Identifier="LDAP_Entry_InternalDisplayName" Expression="C#:resource:return Usercube.Expressions.Functions.UtilExpressions.ToFormatedDN(resource.dn);" EntityType="LDAP_Entry" Property="InternalDisplayName" />\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The entity property expression's identifier must be the same as the one generated by the scaffolding. Then the scaffolding is ignored so the display name ",(0,s.jsx)(n.code,{children:"LDAP_Entry_InternalDisplayName"})," is defined by the ",(0,s.jsx)(n.code,{children:"<EntityPropertyExpression .../>"})," properties written manually here."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Set to ",(0,s.jsx)(n.code,{children:"Merge"}),", the XML item generated by the scaffolding is completed with additional parent properties and/or child elements written manually, while keeping the parent properties and the child elements defined in the scaffolding."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For example, the ",(0,s.jsx)(n.code,{children:"WorkforceModule"})," scaffolding generates the ",(0,s.jsx)(n.code,{children:"Directory_User"})," entity type (among other things) with a specific set of properties. We could choose to add some properties in the entity type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<EntityType Identifier="Directory_User" ConsolidationMode="Merge">  <Property Identifier="OwnedApplications" DisplayName_L1="Managed Applications" Type="ForeignKey" />  <Property Identifier="OwnedBots" DisplayName_L1="Managed RPA Bots" Type="ForeignKey" />  <Property Identifier="Guests" DisplayName_L1="Sponsored Guests" Type="ForeignKey" /></EntityType>\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The entity type's identifier must be the same as the one generated by the scaffolding. Then the entity type ",(0,s.jsx)(n.code,{children:"Directory_User"})," is defined by the ",(0,s.jsx)(n.code,{children:"<EntityType .../>"})," properties of the scaffolding, as well as its ",(0,s.jsx)(n.code,{children:"<Property ... />"})," child elements written in the scaffolding, and we add the properties written manually here."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WorkforceModule"})," scaffolding also generates the ",(0,s.jsx)(n.code,{children:"Directory_UserRecord_UniqueValue_Email"})," aspect (among other things) that uses unicity check rules to generate a unique email address for each new user. We could choose to add a unicity check rule in the aspect to compare the new email address to the existing ones from Microsoft Entra ID (formerly Microsoft Azure AD):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<BuildUniqueValueAspect Identifier="Directory_UserRecord_UniqueValue_Email" ConsolidationMode="Merge">  <UnicityCheck SourceBinding="Workflow_Directory_User:Directory_User.Records" SourceExpression="C#:record:var firstName = record.FirstName.Simplify()?.ToLowerInvariant();\nvar lastName = record.LastName.Simplify()?.ToLowerInvariant();\nif (string.IsNullOrEmpty(firstName) || string.IsNullOrEmpty(lastName))\n{\n/* Data missing */\nreturn null;\n}\n\nvar result = firstName + &quot;.&quot; +   lastName;\nif (iteration &gt; 0)\n{\nresult += iteration.ToString();\n}\n\nreturn result;" TargetEntityType="MicrosoftEntraID_DirectoryObject" TargetExpression="C#:azure_ad:\nif(string.IsNullOrEmpty(azure_ad.mail))\n{\nreturn null;\n}\n\nvar result = azure_ad.mail;\nvar index = result.IndexOf(\'@\');\nif(index &gt;=0)\n{\nresult = result.Substring(0, index);\n}\n\nreturn result;" /></BuildUniqueValueAspect>\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The aspect's identifier must be the same as the one generated by the scaffolding. Then the aspect ",(0,s.jsx)(n.code,{children:"Directory_UserRecord_UniqueValue_Email"})," is defined by the ",(0,s.jsx)(n.code,{children:"<BuildUniqueValueAspect .../>"})," properties of the scaffolding, as well as its ",(0,s.jsx)(n.code,{children:"<UnicityCheck ... />"})," child elements written in the scaffolding, and we add the unicity check rule written manually here."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Set to ",(0,s.jsx)(n.code,{children:"Update"}),", the XML item written manually replaces all parent properties, while keeping the child elements defined in the scaffolding."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For example, the ",(0,s.jsx)(n.code,{children:"OptimizeDisplayTable"})," scaffolding generates the ",(0,s.jsx)(n.code,{children:"Directory_User"})," display entity type (among other things) with a specific set of properties. We could choose to change just the parent properties of the display entity type without changing its child properties:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<DisplayEntityType Identifier="Directory_User" ConsolidationMode="Update" Color="#95c18b" D0IsActive="true" D1IsActive="true" D2IsActive="true" D3IsActive="true" IconCode="People" PluralDisplayName_L1="Users" Priority="0" />\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The display entity type's identifier must be the same as the one generated by the scaffolding. Then the display entity type ",(0,s.jsx)(n.code,{children:"Directory_User"})," is defined by the ",(0,s.jsx)(n.code,{children:"<DisplayEntityType .../>"})," properties written manually here, as well as the ",(0,s.jsx)(n.code,{children:"<Property ... />"})," child elements written in the scaffolding."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Set to ",(0,s.jsx)(n.code,{children:"Delete"}),", the XML item generated by the scaffolding is deleted, including its child elements."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For example, the ",(0,s.jsx)(n.code,{children:"AssignProfileAccessControlRules"})," scaffolding generates the ",(0,s.jsx)(n.code,{children:"Administrator_Category_AccessControl_AssignedProfile"})," access control rule (among other things) with possibly child elements. We could choose to remove the whole access control rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n<AccessControlRule Identifier="Administrator_Category_AccessControl_AssignedProfile" ConsolidationMode="Delete" />\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The access control rule's identifier must be the same as the one generated by the scaffolding. Then the access control rule ",(0,s.jsx)(n.code,{children:"Administrator_Category_AccessControl_AssignedProfile"})," is completely removed."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Deploy the Configuration again. See the",(0,s.jsx)(n.a,{href:"/docs/usercube_saas/usercube/integration-guide/executables/references/deploy-configuration/",children:" Usercube-Deploy Configuration"})," for additional information."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);