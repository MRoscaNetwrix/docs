"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[448529],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var s=r(296540);const n={},a=s.createContext(n);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(a.Provider,{value:t},e.children)}},269924:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"enterpriseauditor/admin/datacollector/script/example1","title":"Script Example 1:\xa0Conversion of Data","description":"This script example demonstrates how to perform a query and modify returned data. The script provides the data collector with the information that would have been provided if the user interface had been used to design the query. However, in this case it is all done through script. The data collector returns a value that is then converted and stored by Access Analyzer.","source":"@site/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example1.md","sourceDirName":"enterpriseauditor/admin/datacollector/script","slug":"/enterpriseauditor/admin/datacollector/script/example1","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example1","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example1.md","tags":[],"version":"current","frontMatter":{},"sidebar":"accessAnalyzerSidebar","previous":{"title":"VBScript Editor","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/editor"},"next":{"title":"Script Example 2:\xa0Command Query","permalink":"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/example2"}}');var n=r(474848),a=r(28453);const o={},i="Script Example 1:\xa0Conversion of Data",c={},d=[{value:"Example of Conversion of Data Script",id:"example-of-conversion-of-data-script",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"script-example-1conversion-of-data",children:"Script Example 1:\xa0Conversion of Data"})}),"\n",(0,n.jsx)(t.p,{children:"This script example demonstrates how to perform a query and modify returned data. The script provides the data collector with the information that would have been provided if the user interface had been used to design the query. However, in this case it is all done through script. The data collector returns a value that is then converted and stored by Access Analyzer."}),"\n",(0,n.jsxs)(t.p,{children:["This script starts by defining a query using the Perfmon Data Collector. Notice that the ",(0,n.jsx)(t.strong,{children:"WorkingQuery"})," object is used, not the Query object. This is done to preserve the Query object, since the Query object will be used to store the results that are different from what the data collector is providing."]}),"\n",(0,n.jsxs)(t.p,{children:["The script then issues the query by calling ",(0,n.jsx)(t.code,{children:"WorkingQuery.Execute"}),". When the query completes, ",(0,n.jsx)(t.strong,{children:"WorkingQuery"})," is set to view the first row of results by setting the ",(0,n.jsx)(t.strong,{children:"ResultRow"})," property. The value within the ",(0,n.jsx)(t.strong,{children:"System Up Time"})," property is then transferred into the ",(0,n.jsx)(t.code,{children:"REMAINDER"})," variable so that it can be more easily manipulated."]}),"\n",(0,n.jsxs)(t.p,{children:["The script then takes the value of ",(0,n.jsx)(t.code,{children:"REMAINDER"}),", which is in seconds, and converts it to days, hours, minutes, and seconds. These values are then recorded in the Query object so that Access Analyzer can store this data."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"NOTE:"})," In this task, the hours, minutes, and seconds properties were specified manually using the task dialog. See the ",(0,n.jsx)(t.a,{href:"/docs/accessanalyzer/enterpriseauditor/admin/datacollector/script/properties",children:"Script Properties"})," topic for additional information."]}),"\n",(0,n.jsx)(t.h2,{id:"example-of-conversion-of-data-script",children:"Example of Conversion of Data Script"}),"\n",(0,n.jsx)(t.p,{children:"The conversation of data script example is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'Sub Task()  \nDim DAYS  \nDim HRS  \nDim MINS  \nDim SECS  \nDim REMAINDER\xa0  \nWorkingQuery.Host=Query.Host  \nWorkingQuery.Source="Perfmon"  \nWorkingQuery.Paths=1  \nWorkingQuery.Path(0)="System\\System Up Time"  \nWorkingQuery.AddProperty\xa0\xa0"NAME=System Up Time,DATATYPE=NUMERIC,VALUE=,COLUMN=UPTIME"  \nWorkingQuery.Execute  \nWorkingQuery.ResultRow=0  \nREMAINDER=WorkingQuery.ResultData("System Up Time")\xa0  \nQuery.ResultRows=1  \nQuery.ResultRow=0\xa0  \n\'Calculate days/hrs/mins/secs  \nDAYS=INT(REMAINDER/86400)  \nREMAINDER=REMAINDER-(DAYS*86400)  \nHRS=INT(REMAINDER/3600)  \nREMAINDER=REMAINDER-(HRS*3600)  \nMINS=INT(REMAINDER/60)  \nSECS=INT(REMAINDER-(MINS*60))\xa0  \nQuery.ResultData("SecondsElapsed")=INT(WorkingQuery.ResultData("System Up Time"))  \nQuery.ResultData("Days")=DAYS  \nQuery.ResultData("Hrs")=HRS  \nQuery.ResultData("Mins")=MINS  \nQuery.ResultData("Secs")=SECS  \nEnd Sub  \n\n'})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);