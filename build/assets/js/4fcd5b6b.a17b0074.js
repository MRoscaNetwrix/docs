"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[587801],{28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var i=n(296540);const r={},s=i.createContext(r);function d(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:t},e.children)}},210164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"usercube/integration-guide/toolkit/expressions/predefined-functions/index","title":"Predefined functions","description":"Identity Manager provides a set of predefined functions that simplify the configuration of entity property expressions and scalar rules. See the [","source":"@site/docs/usercube/usercube/integration-guide/toolkit/expressions/predefined-functions/index.md","sourceDirName":"usercube/integration-guide/toolkit/expressions/predefined-functions","slug":"/usercube/integration-guide/toolkit/expressions/predefined-functions/","permalink":"/docs/usercube/usercube/integration-guide/toolkit/expressions/predefined-functions/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usercube/usercube/integration-guide/toolkit/expressions/predefined-functions/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userCubeSidebar","previous":{"title":"C# utility functions","permalink":"/docs/usercube/usercube/integration-guide/toolkit/expressions/csharp-utility-functions/"},"next":{"title":"Hierarchy in Configuration Files","permalink":"/docs/usercube/usercube/integration-guide/toolkit/file-hierarchy/"}}');var r=n(474848),s=n(28453);const d={},c="Predefined functions",o={},a=[{value:"Examples",id:"examples",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"predefined-functions",children:"Predefined functions"})}),"\n",(0,r.jsxs)(t.p,{children:["Identity Manager provides a set of predefined functions that simplify the configuration of entity property expressions and scalar rules. See the ",(0,r.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/metadata/entitytype/",children:"\nEntity Type\n"})," and",(0,r.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/xml-configuration/provisioning/resourcetype/",children:"Resource Type"})," topics for additional information."]}),"\n",(0,r.jsxs)(t.p,{children:["Unlike C# expressions, Identity Manager's predefined functions do not need any prefix. They can be used as such. See the ",(0,r.jsx)(t.a,{href:"/docs/usercube/usercube/integration-guide/toolkit/expressions/csharp-utility-functions/",children:"\nC# utility functions\n"})," topic for additional information."]}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.p,{children:"The following example shows two predefined functions. The first function normalizes the HR_Person FirstName. The other one converts the end date into a UTC date and adds 1440 minutes."}),"\n",(0,r.jsxs)(t.p,{children:["Code attributes enclosed with ",(0,r.jsx)(t.code,{children:"<>"})," need to be replaced with a custom value before entering the script in the command line."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'  \n\xa0\xa0\xa0\xa0<ScalarRule Property="CFirstName" Binding="HR_Person:FirstName" Expression="Simplify" Policy="Default" />  \n\xa0\xa0\xa0\xa0<ScalarRule Property="CEndDate" Binding="HR_Person:EndDate" Expression="ParseLocalDateThenAddMinutes:Romance Standard Time|dd/MM/yyyy|1440" Policy="Default" />  \n\n'})}),"\n",(0,r.jsx)(t.p,{children:"The following table summarizes existing predefined functions:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Parameters"}),(0,r.jsx)(t.th,{children:"Return type"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToUpper"}),(0,r.jsx)(t.td,{children:"Returns the input string converted to uppercase, using the current culture."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToLower"}),(0,r.jsx)(t.td,{children:"Returns the input string converted to lowercase, using the current culture."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Simplify"}),(0,r.jsx)(t.td,{children:"Returns the input string converted to uppercase, removing all whitespace and special characters, and replacing diacritics."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Trim"}),(0,r.jsx)(t.td,{children:"Removes all leading and trailing white-space characters from the current string."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"TrimStart"}),(0,r.jsx)(t.td,{children:"Removes all leading white-space characters from the current string."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"TrimEnd"}),(0,r.jsx)(t.td,{children:"Removes all trailing white-space characters from the current string."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RemoveDiacritics"}),(0,r.jsx)(t.td,{children:"Replaces all the \xe9\xe8\xe7\xe0\xf9 by eecau,  \xe4 by ae, \xc4 by AE, \xf6 by oe, \xd6 by OE,  \xfc by ue, \xdc by UE, \u010d by c, \u010c by C, \xf8 by o, \xd8 by O,  \u0142 by l, \u0141 by L, \xdf by ss, \xe6 by ae, \xc6 by AE, \u0153 by oe,  \u0152 by OE, \u0161 by sh, and \u0160 by SH."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToDoubleMetaphone"}),(0,r.jsx)(t.td,{children:"An implementation of Double Metaphone phonetic algorithm."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToSoundex"}),(0,r.jsx)(t.td,{children:"An implementation of Soundex phonetic algorithm."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToFirstName"}),(0,r.jsx)(t.td,{children:"Normalizes a first name (first character of each word in uppercase) separated with \u2018-\u2019 and the right accents."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToTitle"}),(0,r.jsx)(t.td,{children:"Puts the first character in uppercase."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ToFormatedDN"}),(0,r.jsx)(t.td,{children:"Returns the input string converted to Distinguished Name format."}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"String"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ParseLocalDate"}),(0,r.jsx)(t.td,{children:"Converts the specified string representation of a date and time to its DateTime equivalent using the specified parameters."}),(0,r.jsx)(t.td,{children:"Time zone identifier"}),(0,r.jsx)(t.td,{children:"Input string format."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ParseLocalDateThenAddMinutes"}),(0,r.jsx)(t.td,{children:"Converts the input string into a DateTime and adds minutes value."}),(0,r.jsx)(t.td,{children:"Time zone identifier"}),(0,r.jsx)(t.td,{children:"Input string format"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ParseUniversalDate"}),(0,r.jsx)(t.td,{children:"Converts the specified string representation of a date and time to its Coordinated Universal Time (UTC)."}),(0,r.jsx)(t.td,{children:"Input string format."}),(0,r.jsx)(t.td,{children:"DateTime"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ParseUniversalDateThenAddMinutes"}),(0,r.jsx)(t.td,{children:"Converts the input string into an UTC DateTime and adds minutes value."}),(0,r.jsx)(t.td,{children:"Time zone identifier"}),(0,r.jsx)(t.td,{children:"Input string format"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FormatLocalDate"}),(0,r.jsx)(t.td,{children:"Converts the specified string into a local DateTime."}),(0,r.jsx)(t.td,{children:"Time zone identifier"}),(0,r.jsx)(t.td,{children:"Input string format."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);