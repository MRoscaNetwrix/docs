"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[73500],{28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var t=n(296540);const s={},o=t.createContext(s);function l(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(o.Provider,{value:i},e.children)}},754050:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"policypak/leastprivilege/deny/dlls","title":"Denying DLLs within Applications","description":"You can deny DLLs within Applications, like PowerShell\u2019s internal DLLs, which make it operate.","source":"@site/docs/policypak/policypak/leastprivilege/deny/dlls.md","sourceDirName":"policypak/leastprivilege/deny","slug":"/policypak/leastprivilege/deny/dlls","permalink":"/docs/policypak/policypak/leastprivilege/deny/dlls","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/deny/dlls.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"How does custom menu item text work after builds 23.8 and later?","permalink":"/docs/policypak/policypak/leastprivilege/custommenuitemtext"},"next":{"title":"Denying Applications (Standard, UWP, and DLLs)","permalink":"/docs/policypak/policypak/leastprivilege/deny/overview"}}');var s=n(474848),o=n(28453);const l={},a="Denying DLLs within Applications",c={},p=[];function r(e){const i={a:"a",h1:"h1",header:"header",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"denying-dlls-within-applications",children:"Denying DLLs within Applications"})}),"\n",(0,s.jsx)(i.p,{children:"You can deny DLLs within Applications, like PowerShell\u2019s internal DLLs, which make it operate."}),"\n",(0,s.jsxs)(i.p,{children:["First you must turn on the option with a Global DLL policy, which may only be enabled on the ",(0,s.jsx)(i.strong,{children:"Computer Configuration"})," side."]}),"\n",(0,s.jsx)(i.p,{children:"![A screenshot of a computer"}),"\n",(0,s.jsx)(i.p,{children:"Description automatically generated](/img/product_docs/policypak/policypak/leastprivilege/deny/denying_dlls_within_applications.webp)"}),"\n",(0,s.jsxs)(i.p,{children:["Then create a matching rule with ",(0,s.jsx)(i.strong,{children:"New DLL Policy"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"![A screenshot of a computer"}),"\n",(0,s.jsx)(i.p,{children:"Description automatically generated](/img/product_docs/policypak/policypak/leastprivilege/deny/denying_dlls_within_applications_1.webp)"}),"\n",(0,s.jsxs)(i.p,{children:["Then you can ",(0,s.jsx)(i.strong,{children:"Deny execution"})," of the DLL when it is encountered."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"NOTE:"})," Some additional details and examples can be found in the ",(0,s.jsx)(i.a,{href:"/docs/policypak/policypak/leastprivilege/powershell/maliciousattacks",children:"How to Defend against malicious PowerShell attacks (DLLs)?"})," topic."]})]})}function d(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}}}]);