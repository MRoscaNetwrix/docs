"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[172741],{3264:(e,t,c)=>{c.r(t),c.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"access/informationcenter/resourceaudit/filesystem/localpolicies/effectivepolicy","title":"Effective Policy Report","description":"The Effective Policy report at the local policy level provides a list of users and groups who are effectively granted or denied access through the selected policy.","source":"@site/docs/accessinformationcenter/access/informationcenter/resourceaudit/filesystem/localpolicies/effectivepolicy.md","sourceDirName":"access/informationcenter/resourceaudit/filesystem/localpolicies","slug":"/access/informationcenter/resourceaudit/filesystem/localpolicies/effectivepolicy","permalink":"/docs/accessinformationcenter/access/informationcenter/resourceaudit/filesystem/localpolicies/effectivepolicy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/accessinformationcenter/access/informationcenter/resourceaudit/filesystem/localpolicies/effectivepolicy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"accessInformationCenterSidebar","previous":{"title":"Exceptions Report","permalink":"/docs/accessinformationcenter/access/informationcenter/resourceaudit/filesystem/exceptions"},"next":{"title":"Local Policies Level Reports","permalink":"/docs/accessinformationcenter/access/informationcenter/resourceaudit/filesystem/localpolicies/overview"}}');var s=c(474848),o=c(28453);const r={},n="Effective Policy Report",l={},a=[];function f(e){const t={h1:"h1",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"effective-policy-report",children:"Effective Policy Report"})}),"\n",(0,s.jsx)(t.p,{children:"The Effective Policy report at the local policy level provides a list of users and groups who are effectively granted or denied access through the selected policy."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Effective Policy report",src:c(220205).A+"",width:"1375",height:"705"})}),"\n",(0,s.jsx)(t.p,{children:"This report is comprised of the following columns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Trustee Name \u2013 Owner of the trustee account"}),"\n",(0,s.jsx)(t.li,{children:"Trustee Account \u2013 Active Directory account associated with the trustee"}),"\n",(0,s.jsx)(t.li,{children:"ObjectSid \u2013 Security ID of the object"}),"\n",(0,s.jsx)(t.li,{children:"Policy \u2013 Allow or Deny access"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If the selected trustee is a group, the Group Membership pane will display the group membership, including nested groups."})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},28453:(e,t,c)=>{c.d(t,{R:()=>r,x:()=>n});var i=c(296540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},220205:(e,t,c)=>{c.d(t,{A:()=>i});const i=c.p+"assets/images/effectivepolicy-e9f9eda80a6d96fdcb08fabf435cb5f7.webp"}}]);