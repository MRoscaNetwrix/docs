"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[410694],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(296540);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},56399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"policypak/leastprivilege/securerun/bestpractices","title":"Least Privilege Manager and SecureRun Implementation Best Practices","description":"Least Privilege Manager is","source":"@site/docs/policypak/policypak/leastprivilege/securerun/bestpractices.md","sourceDirName":"policypak/leastprivilege/securerun","slug":"/policypak/leastprivilege/securerun/bestpractices","permalink":"/docs/policypak/policypak/leastprivilege/securerun/bestpractices","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/policypak/policypak/leastprivilege/securerun/bestpractices.md","tags":[],"version":"current","frontMatter":{},"sidebar":"policyPakSidebar","previous":{"title":"Creating Rules to Avoid UAC Prompts and Other Dialogs","permalink":"/docs/policypak/policypak/leastprivilege/securerun/avoiduac"},"next":{"title":"What is the supported list of BLOCKED script types for Endpoint Policy Manager SecureRun\u2122 ?","permalink":"/docs/policypak/policypak/leastprivilege/securerun/blockedscripttypes"}}');var o=n(474848),a=n(28453);const s={},r="Least Privilege Manager and SecureRun Implementation Best Practices",l={},c=[{value:"Global Settings",id:"global-settings",level:2},{value:"Auto Rules Generator",id:"auto-rules-generator",level:2},{value:"Post-installation Options",id:"post-installation-options",level:2},{value:"Admin Approval",id:"admin-approval",level:3},{value:"Self Elevation",id:"self-elevation",level:3}];function p(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"least-privilege-manager-and-securerun-implementation-best-practices",children:"Least Privilege Manager and SecureRun Implementation Best Practices"})}),"\n",(0,o.jsx)(t.p,{children:"Least Privilege Manager is\na powerful tool to manage local admin rights and elevate only the permissions users need. To reduce the risk of\ndisrupting the user's ability to work, a little pre-implementation work needs to be completed and\ntested. The following outlines the tools we provide to help accomplish that task."}),"\n",(0,o.jsx)(t.h2,{id:"global-settings",children:"Global Settings"}),"\n",(0,o.jsx)(t.p,{children:"The Global Settings (GS), or\nAuditing policy, when linked to an endpoint, can be configured to create an Event log entry on the endpoint\neach time an application is run that needs to be elevated, was elevated, or when it would have been blocked by\nSecureRun because it is untrusted. These Event log entries, and policies created\nfrom these entries, can be later analyzed by IT,. GS does not interact with any applications on the endpoint, so it can safely be distributed\nto as many endpoints as you see fit."}),"\n",(0,o.jsxs)(t.p,{children:["For more information on Using Global Settings Policy, see ",(0,o.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/discovery",children:"Use Discovery to know what rules to make as you transition from Local Admin rights"})]}),"\n",(0,o.jsxs)(t.p,{children:["For more information on using the Global Settings\naudit events to create LPM Policies, see ",(0,o.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/globalauditevent",children:"Auto-Create Policy from Global Audit event"})]}),"\n",(0,o.jsx)(t.h2,{id:"auto-rules-generator",children:"Auto Rules Generator"}),"\n",(0,o.jsx)(t.p,{children:"Another option for\ndiscovering\napplications and/or scripts that would be blocked or require elevation is the LPM Auto-Rule Generator Tool.\nThis tool can be found in the PolicyPak ISO/ZIP file within the \\PolicyPak Extras\\ folder. This utility is run\non an endpoint and will analyze the local applications and/or scripts to discover which ones would need to be\nelevated to run, or be allowed to run through SecureRun. It will create the required allow and elevate\npolicies and it can also create policies to block applications that would otherwise be automatically\nallowed."}),"\n",(0,o.jsxs)(t.p,{children:["For more information on using the Auto-Rules\nGenerator\nTool, see ",(0,o.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/autorulesgeneratortool",children:"Auto Rules Generator Tool (with SecureRun)"})]}),"\n",(0,o.jsx)(t.h2,{id:"post-installation-options",children:"Post-installation Options"}),"\n",(0,o.jsx)(t.p,{children:"It is always best practice to\nstart with a small test group and gradually expand to larger groups, and eventually the entire organization, as\nall the bugs are worked out in your policies. However, once you have started your implementation,\nthere are a couple of features below that may be implemented to further ease the\ntransition."}),"\n",(0,o.jsx)(t.h3,{id:"admin-approval",children:"Admin Approval"}),"\n",(0,o.jsx)(t.p,{children:"Instead of an outright denial, the end-user is presented\nwith a request code. When sent to an administrator, a response code can be created to allow the process to\nrun. This can allow infrequent or new processes to be run without a specific rule being created."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/adminapproval/demo",children:"Admin Approval demo"})}),"\n",(0,o.jsx)(t.h3,{id:"self-elevation",children:"Self Elevation"}),"\n",(0,o.jsx)(t.p,{children:"Given to trusted users only, this allows the end-user to\nrun applications despite not having a specific policy. You can be specific to whom this is allowed, and for\nwhat types of files. As well, each time this is invoked, it is logged in the event log along with the option\nof requiring the user's justification for running the process"}),"\n",(0,o.jsxs)(t.p,{children:["For more information, see ",(0,o.jsx)(t.a,{href:"/docs/policypak/policypak/video/leastprivilege/selfelevatemode/demo",children:"Self Elevate Mode"})]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);