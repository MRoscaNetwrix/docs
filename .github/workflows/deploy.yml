name: Deploy to Render

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

# Prevent multiple concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Docusaurus build
        uses: actions/cache@v4
        with:
          path: |
            .docusaurus
            .cache
            build/.cache
          key: ${{ runner.os }}-docusaurus-build-${{ github.ref_name }}-${{ hashFiles('**/package-lock.json', '**/docusaurus.config.js', 'docs/**/*.md', 'docs/**/*.mdx') }}
          restore-keys: |
            ${{ runner.os }}-docusaurus-build-${{ github.ref_name }}-
            ${{ runner.os }}-docusaurus-build-

      - name: Cache webpack
        uses: actions/cache@v4
        with:
          path: node_modules/.cache
          key: ${{ runner.os }}-webpack-${{ github.ref_name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-webpack-${{ github.ref_name }}-
            ${{ runner.os }}-webpack-

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Validate build output
        run: |
          if [ ! -d "build" ]; then
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          echo "‚úÖ Build directory exists with $(find build -type f | wc -l) files"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.run_id }}
          path: build/
          retention-days: 1

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: Development
    # ONLY run for dev branch pushes or PRs targeting dev
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'pull_request' && github.base_ref == 'dev')
    permissions:
      deployments: write
      pull-requests: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.run_id }}
          path: build/

      - name: Deploy to Render Dev
        id: deploy
        uses: JorgeLNJunior/render-deploy@v1.4.5
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait_deploy: true
          github_deployment: true
          deployment_environment: Development
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployUrl = '${{ secrets.SITE_URL }}';
            const environment = 'Development';
            const commentIdentifier = `<!-- deployment-bot:${environment} -->`;
            
            const comment = `${commentIdentifier}
            ### üöÄ Preview Deployment Ready!
            
            Your changes have been successfully deployed to the ${environment.toLowerCase()} environment.
            
            **Preview URL:** ${deployUrl}
            
            | Status | Environment | Commit | Time |
            |--------|-------------|--------|------|
            | ‚úÖ Success | ${environment} | \`${context.sha.substring(0, 7)}\` | ${new Date().toISOString()} |
            
            ---
            <sub>ü§ñ This comment was automatically generated by the deployment workflow.</sub>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes(commentIdentifier)
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    environment: Production
    # ONLY run for main branch pushes or PRs targeting main
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    permissions:
      deployments: write
      pull-requests: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.run_id }}
          path: build/

      - name: Deploy to Render Prod
        id: deploy
        uses: JorgeLNJunior/render-deploy@v1.4.5
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait_deploy: true
          github_deployment: true
          deployment_environment: Production
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployUrl = '${{ secrets.SITE_URL }}';
            const environment = 'Production';
            const commentIdentifier = `<!-- deployment-bot:${environment} -->`;
            
            const comment = `${commentIdentifier}
            ### üöÄ Production Preview Deployment Ready!
            
            Your changes have been successfully deployed to the ${environment.toLowerCase()} preview environment.
            
            **Preview URL:** ${deployUrl}
            
            | Status | Environment | Commit | Time |
            |--------|-------------|--------|------|
            | ‚úÖ Success | ${environment} | \`${context.sha.substring(0, 7)}\` | ${new Date().toISOString()} |
            
            ‚ö†Ô∏è **Note:** This is a preview deployment for the production environment. The actual production deployment will occur after merge.
            
            ---
            <sub>ü§ñ This comment was automatically generated by the deployment workflow.</sub>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes(commentIdentifier)
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }