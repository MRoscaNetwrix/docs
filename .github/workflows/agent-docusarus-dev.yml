name: Claude Documentation Review

on:
  pull_request:
    branches: [main, dev]
    paths-ignore:
      - '**.md'
      - '**.mdx'
  
  issue_comment:
    types: [created]
  
  pull_request_review_comment:
    types: [created]

jobs:
  claude-review:
    # Only run if it's a PR or if the comment contains @claude
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Optional: Fetch custom system prompt
      - name: Fetch custom system prompt
        id: custom-prompt
        continue-on-error: true
        env:
          TOKEN: ${{ secrets.NETWRIX_PROMPT_REPO_TOKEN }}
        run: |
          if [ -n "$TOKEN" ]; then
            echo "Attempting to fetch custom prompt..."
            curl -s -H "Authorization: token $TOKEN" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o /tmp/system-prompt.txt \
                 https://api.github.com/repos/netwrix/action-agent-prompts/contents/docs-dev.md?ref=main
            
            if [ -s /tmp/system-prompt.txt ]; then
              echo "has_custom=true" >> $GITHUB_OUTPUT
              echo "✅ Custom prompt fetched"
            fi
          fi
      
      # Prepare the review prompt
      - name: Prepare review prompt
        id: prepare-prompt
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, create a comprehensive review prompt
            cat > /tmp/review-prompt.txt << 'EOF'
          You are reviewing a pull request for a Docusaurus-based documentation site.
          
          Please review the changes and check for:
          1. Configuration Integrity: Ensure docusaurus.config.js changes are valid
          2. Sidebar Structure: Verify sidebar configurations are properly formatted
          3. Build Impact: Identify any changes that might affect the documentation build
          4. Link Validity: Check that internal links and references are correct
          5. Best Practices: Ensure changes follow Docusaurus best practices
          
          Focus on non-markdown files that affect documentation infrastructure.
          Provide specific, actionable feedback with code suggestions where appropriate.
          EOF
          else
            # For comments, extract the user's request
            COMMENT="${{ github.event.comment.body }}"
            echo "${COMMENT//@claude/}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' > /tmp/review-prompt.txt
          fi
      
      # Load system prompt if available
      - name: Prepare system prompt
        id: system-prompt
        run: |
          if [ -f /tmp/system-prompt.txt ]; then
            PROMPT=$(cat /tmp/system-prompt.txt)
          else
            PROMPT="You are a documentation expert specializing in Docusaurus sites. Focus on infrastructure, configuration, and build-related changes."
          fi
          
          # GitHub Actions multiline output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Run Claude with the correct model
      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: /tmp/review-prompt.txt
          system_prompt: ${{ steps.system-prompt.outputs.content }}
          allowed_tools: |
            View
            Glob
            Grep
            Read
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "15"
          max_turns: "10"
          model: "claude-opus-4-20250514"  # Fixed model name
      
      # Post results without needing GitHub App
      - name: Post review results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const executionFile = '${{ steps.claude-review.outputs.execution_file }}';
            
            let reviewContent = '⚠️ Review could not be completed.';
            
            if (fs.existsSync(executionFile)) {
              try {
                const content = fs.readFileSync(executionFile, 'utf8');
                const data = JSON.parse(content);
                
                // Extract the last assistant message
                for (let i = data.length - 1; i >= 0; i--) {
                  if (data[i].role === 'assistant' && data[i].content) {
                    reviewContent = data[i].content;
                    break;
                  }
                }
              } catch (e) {
                console.error('Error reading results:', e);
              }
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Claude Documentation Review\n\n${reviewContent}\n\n---\n<sub>Generated by Claude Documentation Review</sub>`
            });
      
      # Summary
      - name: Job Summary
        if: always()
        run: |
          echo "## Claude Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.claude-review.outputs.conclusion || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ -f /tmp/system-prompt.txt ]; then
            echo "- Custom Prompt: ✅ Loaded" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Custom Prompt: ❌ Using default" >> $GITHUB_STEP_SUMMARY
          fi
